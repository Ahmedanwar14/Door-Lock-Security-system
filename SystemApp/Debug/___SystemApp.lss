
___SystemApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000166  00800060  00003264  000032f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001c6  008001c6  0000345e  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  00003460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017c4  00000000  00000000  00006568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00007ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000080bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000b83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ca18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000cecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__vector_6>
      1c:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__vector_7>
      20:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__vector_8>
      24:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3c       	cpi	r26, 0xCE	; 206
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <main>
      8a:	0c 94 30 19 	jmp	0x3260	; 0x3260 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad eb       	ldi	r26, 0xBD	; 189
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 19 	jmp	0x322a	; 0x322a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d eb       	ldi	r24, 0xBD	; 189
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 19 	jmp	0x322a	; 0x322a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d eb       	ldi	r22, 0xBD	; 189
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	eb 53       	subi	r30, 0x3B	; 59
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Buzzer_vidInit>:
#include "Dio_int.h"
#include "Buzzer_cfg.h"
#include "Buzzer_int.h"

void Buzzer_vidInit(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(BUZZER_PIN , DIO_u8OUTPUT);
     e00:	88 e0       	ldi	r24, 0x08	; 8
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <Buzzer_vidTurnOn>:

void Buzzer_vidTurnOn(void)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(BUZZER_PIN , DIO_u8HIGH);
     e16:	88 e0       	ldi	r24, 0x08	; 8
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <Buzzer_vidTurnOff>:

void Buzzer_vidTurnOff(void)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(BUZZER_PIN , DIO_u8LOW);
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <Dio_vidSetPinDir>:
#include "../Lib/Bit_math.h"
#include "Dio_priv.h"
#include "Dio_int.h"

void Dio_vidSetPinDir(u8 Pin , u8 Dir)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <Dio_vidSetPinDir+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <Dio_vidSetPinDir+0x8>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <Dio_vidSetPinDir+0xa>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	8b 83       	std	Y+3, r24	; 0x03
     e4a:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	86 95       	lsr	r24
     e50:	86 95       	lsr	r24
     e52:	86 95       	lsr	r24
     e54:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	87 70       	andi	r24, 0x07	; 7
     e5a:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	3e 83       	std	Y+6, r19	; 0x06
     e64:	2d 83       	std	Y+5, r18	; 0x05
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <Dio_vidSetPinDir+0x38>
     e70:	43 c0       	rjmp	.+134    	; 0xef8 <Dio_vidSetPinDir+0xbe>
     e72:	2d 81       	ldd	r18, Y+5	; 0x05
     e74:	3e 81       	ldd	r19, Y+6	; 0x06
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	2c f4       	brge	.+10     	; 0xe86 <Dio_vidSetPinDir+0x4c>
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	71 f0       	breq	.+28     	; 0xea0 <Dio_vidSetPinDir+0x66>
     e84:	bc c0       	rjmp	.+376    	; 0xffe <Dio_vidSetPinDir+0x1c4>
     e86:	2d 81       	ldd	r18, Y+5	; 0x05
     e88:	3e 81       	ldd	r19, Y+6	; 0x06
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <Dio_vidSetPinDir+0x58>
     e90:	5f c0       	rjmp	.+190    	; 0xf50 <Dio_vidSetPinDir+0x116>
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <Dio_vidSetPinDir+0x64>
     e9c:	85 c0       	rjmp	.+266    	; 0xfa8 <Dio_vidSetPinDir+0x16e>
     e9e:	af c0       	rjmp	.+350    	; 0xffe <Dio_vidSetPinDir+0x1c4>
		case 0: //DDRA
			if(Dir ==1)
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	a1 f4       	brne	.+40     	; 0xece <Dio_vidSetPinDir+0x94>
				{
				SET_BIT(DDRA.Byte , PinLoc);
     ea6:	aa e3       	ldi	r26, 0x3A	; 58
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e3       	ldi	r30, 0x3A	; 58
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <Dio_vidSetPinDir+0x8a>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <Dio_vidSetPinDir+0x86>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	98 c0       	rjmp	.+304    	; 0xffe <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRA.Byte , PinLoc);
     ece:	aa e3       	ldi	r26, 0x3A	; 58
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ea e3       	ldi	r30, 0x3A	; 58
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <Dio_vidSetPinDir+0xb2>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <Dio_vidSetPinDir+0xae>
     ef0:	80 95       	com	r24
     ef2:	84 23       	and	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	83 c0       	rjmp	.+262    	; 0xffe <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 1: //DDRB
			if(Dir ==1)
     ef8:	8c 81       	ldd	r24, Y+4	; 0x04
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	a1 f4       	brne	.+40     	; 0xf26 <Dio_vidSetPinDir+0xec>
				{
				SET_BIT(DDRB.Byte , PinLoc);
     efe:	a7 e3       	ldi	r26, 0x37	; 55
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e3       	ldi	r30, 0x37	; 55
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <Dio_vidSetPinDir+0xe2>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <Dio_vidSetPinDir+0xde>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	6c c0       	rjmp	.+216    	; 0xffe <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRB.Byte , PinLoc);
     f26:	a7 e3       	ldi	r26, 0x37	; 55
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e3       	ldi	r30, 0x37	; 55
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <Dio_vidSetPinDir+0x10a>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <Dio_vidSetPinDir+0x106>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	57 c0       	rjmp	.+174    	; 0xffe <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 2: //DDRC
			if(Dir ==1)
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	a1 f4       	brne	.+40     	; 0xf7e <Dio_vidSetPinDir+0x144>
				{
				SET_BIT(DDRC.Byte , PinLoc);
     f56:	a4 e3       	ldi	r26, 0x34	; 52
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e4 e3       	ldi	r30, 0x34	; 52
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <Dio_vidSetPinDir+0x13a>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <Dio_vidSetPinDir+0x136>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	40 c0       	rjmp	.+128    	; 0xffe <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRC.Byte , PinLoc);
     f7e:	a4 e3       	ldi	r26, 0x34	; 52
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e4 e3       	ldi	r30, 0x34	; 52
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <Dio_vidSetPinDir+0x162>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <Dio_vidSetPinDir+0x15e>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	2b c0       	rjmp	.+86     	; 0xffe <Dio_vidSetPinDir+0x1c4>
				}
			break;
		case 3: //DDRD
			if(Dir ==1)
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	a1 f4       	brne	.+40     	; 0xfd6 <Dio_vidSetPinDir+0x19c>
				{
				SET_BIT(DDRD.Byte , PinLoc);
     fae:	a1 e3       	ldi	r26, 0x31	; 49
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e1 e3       	ldi	r30, 0x31	; 49
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <Dio_vidSetPinDir+0x192>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <Dio_vidSetPinDir+0x18e>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <Dio_vidSetPinDir+0x1c4>
				}
			else
				{
				CLR_BIT(DDRD.Byte , PinLoc);
     fd6:	a1 e3       	ldi	r26, 0x31	; 49
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 e3       	ldi	r30, 0x31	; 49
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <Dio_vidSetPinDir+0x1ba>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <Dio_vidSetPinDir+0x1b6>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
				}
			break;
	}
}
     ffe:	26 96       	adiw	r28, 0x06	; 6
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <Dio_vidSetPinVal>:

void Dio_vidSetPinVal(u8 Pin , u8 val)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <Dio_vidSetPinVal+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <Dio_vidSetPinVal+0x8>
    1018:	00 d0       	rcall	.+0      	; 0x101a <Dio_vidSetPinVal+0xa>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;

	PortId = Pin/8;
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	86 95       	lsr	r24
    1026:	86 95       	lsr	r24
    1028:	86 95       	lsr	r24
    102a:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc = Pin%8;
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	87 70       	andi	r24, 0x07	; 7
    1030:	89 83       	std	Y+1, r24	; 0x01

	switch(PortId){
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3e 83       	std	Y+6, r19	; 0x06
    103a:	2d 83       	std	Y+5, r18	; 0x05
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <Dio_vidSetPinVal+0x38>
    1046:	43 c0       	rjmp	.+134    	; 0x10ce <Dio_vidSetPinVal+0xbe>
    1048:	2d 81       	ldd	r18, Y+5	; 0x05
    104a:	3e 81       	ldd	r19, Y+6	; 0x06
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <Dio_vidSetPinVal+0x4c>
    1052:	8d 81       	ldd	r24, Y+5	; 0x05
    1054:	9e 81       	ldd	r25, Y+6	; 0x06
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	71 f0       	breq	.+28     	; 0x1076 <Dio_vidSetPinVal+0x66>
    105a:	bc c0       	rjmp	.+376    	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
    105c:	2d 81       	ldd	r18, Y+5	; 0x05
    105e:	3e 81       	ldd	r19, Y+6	; 0x06
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <Dio_vidSetPinVal+0x58>
    1066:	5f c0       	rjmp	.+190    	; 0x1126 <Dio_vidSetPinVal+0x116>
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <Dio_vidSetPinVal+0x64>
    1072:	85 c0       	rjmp	.+266    	; 0x117e <Dio_vidSetPinVal+0x16e>
    1074:	af c0       	rjmp	.+350    	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
		case 0: //PORTA
			if(val ==1)
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	a1 f4       	brne	.+40     	; 0x10a4 <Dio_vidSetPinVal+0x94>
				{
				SET_BIT(PORTA.Byte , PinLoc);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <Dio_vidSetPinVal+0x8a>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <Dio_vidSetPinVal+0x86>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	98 c0       	rjmp	.+304    	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTA.Byte , PinLoc);
    10a4:	ab e3       	ldi	r26, 0x3B	; 59
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	eb e3       	ldi	r30, 0x3B	; 59
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <Dio_vidSetPinVal+0xb2>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <Dio_vidSetPinVal+0xae>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	83 c0       	rjmp	.+262    	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 1: //PORTB
			if(val ==1)
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	a1 f4       	brne	.+40     	; 0x10fc <Dio_vidSetPinVal+0xec>
				{
				SET_BIT(PORTB.Byte , PinLoc);
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <Dio_vidSetPinVal+0xe2>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <Dio_vidSetPinVal+0xde>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	6c c0       	rjmp	.+216    	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTB.Byte , PinLoc);
    10fc:	a8 e3       	ldi	r26, 0x38	; 56
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e3       	ldi	r30, 0x38	; 56
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <Dio_vidSetPinVal+0x10a>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <Dio_vidSetPinVal+0x106>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	57 c0       	rjmp	.+174    	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 2: //PORTC
			if(val ==1)
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	a1 f4       	brne	.+40     	; 0x1154 <Dio_vidSetPinVal+0x144>
				{
				SET_BIT(PORTC.Byte , PinLoc);
    112c:	a5 e3       	ldi	r26, 0x35	; 53
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e3       	ldi	r30, 0x35	; 53
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <Dio_vidSetPinVal+0x13a>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <Dio_vidSetPinVal+0x136>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	40 c0       	rjmp	.+128    	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTC.Byte , PinLoc);
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <Dio_vidSetPinVal+0x162>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <Dio_vidSetPinVal+0x15e>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	2b c0       	rjmp	.+86     	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
				}
			break;
		case 3: //PORTD
			if(val ==1)
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	a1 f4       	brne	.+40     	; 0x11ac <Dio_vidSetPinVal+0x19c>
				{
				SET_BIT(PORTD.Byte , PinLoc);
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <Dio_vidSetPinVal+0x192>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <Dio_vidSetPinVal+0x18e>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	14 c0       	rjmp	.+40     	; 0x11d4 <Dio_vidSetPinVal+0x1c4>
				}
			else
				{
				CLR_BIT(PORTD.Byte , PinLoc);
    11ac:	a2 e3       	ldi	r26, 0x32	; 50
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <Dio_vidSetPinVal+0x1ba>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <Dio_vidSetPinVal+0x1b6>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
				}
			break;
	}
}
    11d4:	26 96       	adiw	r28, 0x06	; 6
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <Dio_u8GetPinVal>:

u8 Dio_u8GetPinVal(u8 pin)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <Dio_u8GetPinVal+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <Dio_u8GetPinVal+0x8>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <Dio_u8GetPinVal+0xa>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	8c 83       	std	Y+4, r24	; 0x04
	u8 PortId;
	u8 PinLoc;
	u8 PinVal = 0;
    11f6:	19 82       	std	Y+1, r1	; 0x01

	if (pin > 31)
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	80 32       	cpi	r24, 0x20	; 32
    11fc:	18 f0       	brcs	.+6      	; 0x1204 <Dio_u8GetPinVal+0x1e>
	{
		PinVal = DIO_u8INVALED_PIN_NUM;
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	6f c0       	rjmp	.+222    	; 0x12e2 <Dio_u8GetPinVal+0xfc>
	}
	else
	{
		PortId = pin/8;
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	86 95       	lsr	r24
    1208:	86 95       	lsr	r24
    120a:	86 95       	lsr	r24
    120c:	8b 83       	std	Y+3, r24	; 0x03
		PinLoc = pin%8;
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	87 70       	andi	r24, 0x07	; 7
    1212:	8a 83       	std	Y+2, r24	; 0x02
		switch(PortId)
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3e 83       	std	Y+6, r19	; 0x06
    121c:	2d 83       	std	Y+5, r18	; 0x05
    121e:	4d 81       	ldd	r20, Y+5	; 0x05
    1220:	5e 81       	ldd	r21, Y+6	; 0x06
    1222:	41 30       	cpi	r20, 0x01	; 1
    1224:	51 05       	cpc	r21, r1
    1226:	41 f1       	breq	.+80     	; 0x1278 <Dio_u8GetPinVal+0x92>
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	91 05       	cpc	r25, r1
    1230:	34 f4       	brge	.+12     	; 0x123e <Dio_u8GetPinVal+0x58>
    1232:	2d 81       	ldd	r18, Y+5	; 0x05
    1234:	3e 81       	ldd	r19, Y+6	; 0x06
    1236:	21 15       	cp	r18, r1
    1238:	31 05       	cpc	r19, r1
    123a:	61 f0       	breq	.+24     	; 0x1254 <Dio_u8GetPinVal+0x6e>
    123c:	52 c0       	rjmp	.+164    	; 0x12e2 <Dio_u8GetPinVal+0xfc>
    123e:	4d 81       	ldd	r20, Y+5	; 0x05
    1240:	5e 81       	ldd	r21, Y+6	; 0x06
    1242:	42 30       	cpi	r20, 0x02	; 2
    1244:	51 05       	cpc	r21, r1
    1246:	51 f1       	breq	.+84     	; 0x129c <Dio_u8GetPinVal+0xb6>
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	b9 f1       	breq	.+110    	; 0x12c0 <Dio_u8GetPinVal+0xda>
    1252:	47 c0       	rjmp	.+142    	; 0x12e2 <Dio_u8GetPinVal+0xfc>
		{
			case 0: //PINA
				PinVal = GET_BIT(PINA.Byte , PinLoc);
    1254:	e9 e3       	ldi	r30, 0x39	; 57
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a9 01       	movw	r20, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <Dio_u8GetPinVal+0x86>
    1268:	55 95       	asr	r21
    126a:	47 95       	ror	r20
    126c:	8a 95       	dec	r24
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <Dio_u8GetPinVal+0x82>
    1270:	ca 01       	movw	r24, r20
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	35 c0       	rjmp	.+106    	; 0x12e2 <Dio_u8GetPinVal+0xfc>
			break;

			case 1: //PINB
				PinVal = GET_BIT(PINB.Byte , PinLoc);
    1278:	e6 e3       	ldi	r30, 0x36	; 54
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <Dio_u8GetPinVal+0xaa>
    128c:	55 95       	asr	r21
    128e:	47 95       	ror	r20
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <Dio_u8GetPinVal+0xa6>
    1294:	ca 01       	movw	r24, r20
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	23 c0       	rjmp	.+70     	; 0x12e2 <Dio_u8GetPinVal+0xfc>
			break;

			case 2: //PINC
				PinVal = GET_BIT(PINC.Byte , PinLoc);
    129c:	e3 e3       	ldi	r30, 0x33	; 51
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a9 01       	movw	r20, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Dio_u8GetPinVal+0xce>
    12b0:	55 95       	asr	r21
    12b2:	47 95       	ror	r20
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <Dio_u8GetPinVal+0xca>
    12b8:	ca 01       	movw	r24, r20
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	11 c0       	rjmp	.+34     	; 0x12e2 <Dio_u8GetPinVal+0xfc>
			break;

			case 3: //PIND
				PinVal = GET_BIT(PIND.Byte , PinLoc);
    12c0:	e0 e3       	ldi	r30, 0x30	; 48
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <Dio_u8GetPinVal+0xf2>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <Dio_u8GetPinVal+0xee>
    12dc:	ca 01       	movw	r24, r20
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return PinVal;
    12e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    12e4:	26 96       	adiw	r28, 0x06	; 6
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <Eeprom_vidInit>:
#include "I2c_int.h"
#include "Eeprom_priv.h"
#include "Eeprom_int.h"

void Eeprom_vidInit(void)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	/* Initialize I2C AS Communication Protocol To Connect MCU With EEPROM */
	I2c_vidInit();
    12fe:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <I2c_vidInit>

}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <Eeprom_u8WiteByte>:



u8   Eeprom_u8WiteByte(u8 DeviceId , u16 Location , u8 Byte)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <Eeprom_u8WiteByte+0x6>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <Eeprom_u8WiteByte+0x8>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <Eeprom_u8WiteByte+0xa>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	8a 83       	std	Y+2, r24	; 0x02
    1318:	7c 83       	std	Y+4, r23	; 0x04
    131a:	6b 83       	std	Y+3, r22	; 0x03
    131c:	4d 83       	std	Y+5, r20	; 0x05

	/* Local Variable To save Slave Address */
	u8 SLA;

	/* At first Select Slave Address */
	if(DeviceId == Device_0)
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 23       	and	r24, r24
    1322:	41 f4       	brne	.+16     	; 0x1334 <Eeprom_u8WiteByte+0x2c>
	{
		/* Select Slave Address depend on Device Address_0 and Page num from Location Variable */
		SLA = EEPROM_u8DEVICE_ADRESS_0 | ((Location >> 8) << 1);
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	89 2f       	mov	r24, r25
    132a:	99 27       	eor	r25, r25
    132c:	88 0f       	add	r24, r24
    132e:	80 6a       	ori	r24, 0xA0	; 160
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	0a c0       	rjmp	.+20     	; 0x1348 <Eeprom_u8WiteByte+0x40>
	}
	else if(DeviceId == Device_1)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	39 f4       	brne	.+14     	; 0x1348 <Eeprom_u8WiteByte+0x40>
	{
		/* Select Slave Address depend on Device Address_1 and Page num from Location Variable */
		SLA = EEPROM_u8DEVICE_ADRESS_1 | ((Location >> 8) << 1);
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	89 2f       	mov	r24, r25
    1340:	99 27       	eor	r25, r25
    1342:	88 0f       	add	r24, r24
    1344:	88 6a       	ori	r24, 0xA8	; 168
    1346:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Send Start Bit */
	I2c_vidSendStart();
    1348:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2c_vidSendStart>

	/* Check Status */
	if(I2c_u8CheckStatus(I2C_u8SC_TRASMITTER_MODE) == 1)
    134c:	88 e0       	ldi	r24, 0x08	; 8
    134e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	e9 f4       	brne	.+58     	; 0x1390 <Eeprom_u8WiteByte+0x88>
	{
		/* Send Slave Address With Write Bit */
		I2c_vidSendSlaveAddess(SLA);
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	0e 94 a5 0b 	call	0x174a	; 0x174a <I2c_vidSendSlaveAddess>

		/* Check Status */
		if(I2c_u8CheckStatus(I2C_u8SLA_W_TRASMITTER_MODE)== 1)
    135c:	88 e1       	ldi	r24, 0x18	; 24
    135e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	a9 f4       	brne	.+42     	; 0x1390 <Eeprom_u8WiteByte+0x88>
		{
			/* Send Location "Location For EEPROM But Data For I2C" */
			I2c_vidSendData( (u8)Location );
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2c_vidSendData>

			/* Check Status */
			if(I2c_u8CheckStatus(I2C_u8DATA_TRASMITTER_MODE)== 1)
    136c:	88 e2       	ldi	r24, 0x28	; 40
    136e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	69 f4       	brne	.+26     	; 0x1390 <Eeprom_u8WiteByte+0x88>
			{
				/* Send Byte */
				I2c_vidSendData(Byte);
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2c_vidSendData>

				/* Check Status */
				if(I2c_u8CheckStatus(I2C_u8DATA_TRASMITTER_MODE)== 1)
    137c:	88 e2       	ldi	r24, 0x28	; 40
    137e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	29 f4       	brne	.+10     	; 0x1390 <Eeprom_u8WiteByte+0x88>
				{
					/* Send Stop */
					I2c_vidSendStop();
    1386:	0e 94 9a 0b 	call	0x1734	; 0x1734 <I2c_vidSendStop>

					/* Return 1 To Reflect Data Written WELL*/
					return 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	8e 83       	std	Y+6, r24	; 0x06
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <Eeprom_u8WiteByte+0x8a>
			}

		}
	}
	/* Return 0 To Reflect Error*/
	return 0;
    1390:	1e 82       	std	Y+6, r1	; 0x06
    1392:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1394:	26 96       	adiw	r28, 0x06	; 6
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <Eeprom_u8ReadByte>:



u8   Eeprom_u8ReadByte(u8 DeviceId , u16 Location , u8* pByte)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	27 97       	sbiw	r28, 0x07	; 7
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	7c 83       	std	Y+4, r23	; 0x04
    13be:	6b 83       	std	Y+3, r22	; 0x03
    13c0:	5e 83       	std	Y+6, r21	; 0x06
    13c2:	4d 83       	std	Y+5, r20	; 0x05

	/* Local Variable To save Slave Address */
	u8 SLA;

	/* At first Select Slave Address */
	if(DeviceId == Device_0)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	88 23       	and	r24, r24
    13c8:	41 f4       	brne	.+16     	; 0x13da <Eeprom_u8ReadByte+0x34>
	{
		/* Select Slave Address depend on Device Address_0 and Page num from Location Variable */
		SLA = EEPROM_u8DEVICE_ADRESS_0 | ((Location >> 8) << 1);
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	89 2f       	mov	r24, r25
    13d0:	99 27       	eor	r25, r25
    13d2:	88 0f       	add	r24, r24
    13d4:	80 6a       	ori	r24, 0xA0	; 160
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0a c0       	rjmp	.+20     	; 0x13ee <Eeprom_u8ReadByte+0x48>
	}
	else if(DeviceId == Device_1)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	39 f4       	brne	.+14     	; 0x13ee <Eeprom_u8ReadByte+0x48>
	{
		/* Select Slave Address depend on Device Address_1 and Page num from Location Variable */
		SLA = EEPROM_u8DEVICE_ADRESS_1 | ((Location >> 8) << 1);
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	89 2f       	mov	r24, r25
    13e6:	99 27       	eor	r25, r25
    13e8:	88 0f       	add	r24, r24
    13ea:	88 6a       	ori	r24, 0xA8	; 168
    13ec:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Send Start Bit */
	I2c_vidSendStart();
    13ee:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2c_vidSendStart>

	/* Check Status */
	if(I2c_u8CheckStatus(I2C_u8SC_TRASMITTER_MODE) == 1)
    13f2:	88 e0       	ldi	r24, 0x08	; 8
    13f4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	51 f5       	brne	.+84     	; 0x1450 <Eeprom_u8ReadByte+0xaa>
	{
		/* Send Slave Address With Write Bit */
		I2c_vidSendSlaveAddess(SLA);
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	0e 94 a5 0b 	call	0x174a	; 0x174a <I2c_vidSendSlaveAddess>

		/* Check Status */
		if(I2c_u8CheckStatus(I2C_u8SLA_W_TRASMITTER_MODE)== 1)
    1402:	88 e1       	ldi	r24, 0x18	; 24
    1404:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	11 f5       	brne	.+68     	; 0x1450 <Eeprom_u8ReadByte+0xaa>
		{
			/* Send Location "Location For EEPROM But Data For I2C" */
			I2c_vidSendData( (u8)Location );
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2c_vidSendData>

			/* Check Status */
			if(I2c_u8CheckStatus(I2C_u8DATA_TRASMITTER_MODE)== 1)
    1412:	88 e2       	ldi	r24, 0x28	; 40
    1414:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	d1 f4       	brne	.+52     	; 0x1450 <Eeprom_u8ReadByte+0xaa>
			{
				/* Send Start "Repeated Start" */
				I2c_vidSendStart();
    141c:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2c_vidSendStart>

				/* Check Status */
				if(I2c_u8CheckStatus(I2C_u8RSC_TRASMITTER_MODE)== 1)
    1420:	80 e1       	ldi	r24, 0x10	; 16
    1422:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	99 f4       	brne	.+38     	; 0x1450 <Eeprom_u8ReadByte+0xaa>
				{
					/* Send Slave Address With Read Bit */
					I2c_vidSendSlaveAddess( (SLA | 0x01) );
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	0e 94 a5 0b 	call	0x174a	; 0x174a <I2c_vidSendSlaveAddess>

					/* Check Status */
					if(I2c_u8CheckStatus(I2C_u8SLA_R_RECEIVE_MODE)== 1)
    1432:	80 e4       	ldi	r24, 0x40	; 64
    1434:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <I2c_u8CheckStatus>
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	51 f4       	brne	.+20     	; 0x1450 <Eeprom_u8ReadByte+0xaa>
					{
						/* Read The Received Byte */
						*pByte = I2c_vidReceiveData();
    143c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <I2c_vidReceiveData>
    1440:	ed 81       	ldd	r30, Y+5	; 0x05
    1442:	fe 81       	ldd	r31, Y+6	; 0x06
    1444:	80 83       	st	Z, r24
						/* Send Stop */
						I2c_vidSendStop();
    1446:	0e 94 9a 0b 	call	0x1734	; 0x1734 <I2c_vidSendStop>

						/* Return 1 To Reflect Data Read WELL*/
						return 1;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	8f 83       	std	Y+7, r24	; 0x07
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <Eeprom_u8ReadByte+0xac>
			}

		}
	}
	/* Return 0 To Reflect Error*/
	return 0;
    1450:	1f 82       	std	Y+7, r1	; 0x07
    1452:	8f 81       	ldd	r24, Y+7	; 0x07

}
    1454:	27 96       	adiw	r28, 0x07	; 7
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <Eeprom_u8ClearDevice>:



void Eeprom_u8ClearDevice(u8 DeviceId , u16 Num_Location)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	a1 97       	sbiw	r28, 0x21	; 33
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	8f 8f       	std	Y+31, r24	; 0x1f
    147c:	79 a3       	std	Y+33, r23	; 0x21
    147e:	68 a3       	std	Y+32, r22	; 0x20
	u16 i;

	if(DeviceId == Device_0)
    1480:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1482:	88 23       	and	r24, r24
    1484:	09 f0       	breq	.+2      	; 0x1488 <Eeprom_u8ClearDevice+0x22>
    1486:	8a c0       	rjmp	.+276    	; 0x159c <Eeprom_u8ClearDevice+0x136>
	{
		for(i=0; i<Num_Location; i++)
    1488:	1e 8e       	std	Y+30, r1	; 0x1e
    148a:	1d 8e       	std	Y+29, r1	; 0x1d
    148c:	7e c0       	rjmp	.+252    	; 0x158a <Eeprom_u8ClearDevice+0x124>
		{
			Eeprom_u8WiteByte(Device_0 , i , 0);
    148e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1490:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	b9 01       	movw	r22, r18
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	0e 94 84 09 	call	0x1308	; 0x1308 <Eeprom_u8WiteByte>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 e2       	ldi	r26, 0x20	; 32
    14a2:	b1 e4       	ldi	r27, 0x41	; 65
    14a4:	89 8f       	std	Y+25, r24	; 0x19
    14a6:	9a 8f       	std	Y+26, r25	; 0x1a
    14a8:	ab 8f       	std	Y+27, r26	; 0x1b
    14aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	69 8d       	ldd	r22, Y+25	; 0x19
    14ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a ef       	ldi	r20, 0xFA	; 250
    14ba:	54 e4       	ldi	r21, 0x44	; 68
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8d 8b       	std	Y+21, r24	; 0x15
    14c6:	9e 8b       	std	Y+22, r25	; 0x16
    14c8:	af 8b       	std	Y+23, r26	; 0x17
    14ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14cc:	6d 89       	ldd	r22, Y+21	; 0x15
    14ce:	7e 89       	ldd	r23, Y+22	; 0x16
    14d0:	8f 89       	ldd	r24, Y+23	; 0x17
    14d2:	98 8d       	ldd	r25, Y+24	; 0x18
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <Eeprom_u8ClearDevice+0x88>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 8b       	std	Y+20, r25	; 0x14
    14ea:	8b 8b       	std	Y+19, r24	; 0x13
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <Eeprom_u8ClearDevice+0x106>
	else if (__tmp > 65535)
    14ee:	6d 89       	ldd	r22, Y+21	; 0x15
    14f0:	7e 89       	ldd	r23, Y+22	; 0x16
    14f2:	8f 89       	ldd	r24, Y+23	; 0x17
    14f4:	98 8d       	ldd	r25, Y+24	; 0x18
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <Eeprom_u8ClearDevice+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	69 8d       	ldd	r22, Y+25	; 0x19
    1508:	7a 8d       	ldd	r23, Y+26	; 0x1a
    150a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    150c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9c 8b       	std	Y+20, r25	; 0x14
    152c:	8b 8b       	std	Y+19, r24	; 0x13
    152e:	0f c0       	rjmp	.+30     	; 0x154e <Eeprom_u8ClearDevice+0xe8>
    1530:	88 ec       	ldi	r24, 0xC8	; 200
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9a 8b       	std	Y+18, r25	; 0x12
    1536:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1538:	89 89       	ldd	r24, Y+17	; 0x11
    153a:	9a 89       	ldd	r25, Y+18	; 0x12
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <Eeprom_u8ClearDevice+0xd6>
    1540:	9a 8b       	std	Y+18, r25	; 0x12
    1542:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8b 89       	ldd	r24, Y+19	; 0x13
    1546:	9c 89       	ldd	r25, Y+20	; 0x14
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9c 8b       	std	Y+20, r25	; 0x14
    154c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8b 89       	ldd	r24, Y+19	; 0x13
    1550:	9c 89       	ldd	r25, Y+20	; 0x14
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <Eeprom_u8ClearDevice+0xca>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <Eeprom_u8ClearDevice+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	6d 89       	ldd	r22, Y+21	; 0x15
    155a:	7e 89       	ldd	r23, Y+22	; 0x16
    155c:	8f 89       	ldd	r24, Y+23	; 0x17
    155e:	98 8d       	ldd	r25, Y+24	; 0x18
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9c 8b       	std	Y+20, r25	; 0x14
    156a:	8b 8b       	std	Y+19, r24	; 0x13
    156c:	8b 89       	ldd	r24, Y+19	; 0x13
    156e:	9c 89       	ldd	r25, Y+20	; 0x14
    1570:	98 8b       	std	Y+16, r25	; 0x10
    1572:	8f 87       	std	Y+15, r24	; 0x0f
    1574:	8f 85       	ldd	r24, Y+15	; 0x0f
    1576:	98 89       	ldd	r25, Y+16	; 0x10
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <Eeprom_u8ClearDevice+0x112>
    157c:	98 8b       	std	Y+16, r25	; 0x10
    157e:	8f 87       	std	Y+15, r24	; 0x0f
{
	u16 i;

	if(DeviceId == Device_0)
	{
		for(i=0; i<Num_Location; i++)
    1580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1582:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	9e 8f       	std	Y+30, r25	; 0x1e
    1588:	8d 8f       	std	Y+29, r24	; 0x1d
    158a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    158c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    158e:	88 a1       	ldd	r24, Y+32	; 0x20
    1590:	99 a1       	ldd	r25, Y+33	; 0x21
    1592:	28 17       	cp	r18, r24
    1594:	39 07       	cpc	r19, r25
    1596:	08 f4       	brcc	.+2      	; 0x159a <Eeprom_u8ClearDevice+0x134>
    1598:	7a cf       	rjmp	.-268    	; 0x148e <Eeprom_u8ClearDevice+0x28>
    159a:	8d c0       	rjmp	.+282    	; 0x16b6 <Eeprom_u8ClearDevice+0x250>
		{
			Eeprom_u8WiteByte(Device_0 , i , 0);
			_delay_ms(10);
		}
	}
	else if(DeviceId == Device_1)
    159c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <Eeprom_u8ClearDevice+0x13e>
    15a2:	89 c0       	rjmp	.+274    	; 0x16b6 <Eeprom_u8ClearDevice+0x250>
	{
		for(i=0; i<Num_Location; i++)
    15a4:	1e 8e       	std	Y+30, r1	; 0x1e
    15a6:	1d 8e       	std	Y+29, r1	; 0x1d
    15a8:	7e c0       	rjmp	.+252    	; 0x16a6 <Eeprom_u8ClearDevice+0x240>
		{
			Eeprom_u8WiteByte(Device_1 , i , 0);
    15aa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    15ac:	3e 8d       	ldd	r19, Y+30	; 0x1e
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	b9 01       	movw	r22, r18
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 84 09 	call	0x1308	; 0x1308 <Eeprom_u8WiteByte>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e2       	ldi	r26, 0x20	; 32
    15be:	b1 e4       	ldi	r27, 0x41	; 65
    15c0:	8b 87       	std	Y+11, r24	; 0x0b
    15c2:	9c 87       	std	Y+12, r25	; 0x0c
    15c4:	ad 87       	std	Y+13, r26	; 0x0d
    15c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4a ef       	ldi	r20, 0xFA	; 250
    15d6:	54 e4       	ldi	r21, 0x44	; 68
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8f 83       	std	Y+7, r24	; 0x07
    15e2:	98 87       	std	Y+8, r25	; 0x08
    15e4:	a9 87       	std	Y+9, r26	; 0x09
    15e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	2c f4       	brge	.+10     	; 0x160a <Eeprom_u8ClearDevice+0x1a4>
		__ticks = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	3f c0       	rjmp	.+126    	; 0x1688 <Eeprom_u8ClearDevice+0x222>
	else if (__tmp > 65535)
    160a:	6f 81       	ldd	r22, Y+7	; 0x07
    160c:	78 85       	ldd	r23, Y+8	; 0x08
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	4c f5       	brge	.+82     	; 0x1674 <Eeprom_u8ClearDevice+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1622:	6b 85       	ldd	r22, Y+11	; 0x0b
    1624:	7c 85       	ldd	r23, Y+12	; 0x0c
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e2       	ldi	r20, 0x20	; 32
    1630:	51 e4       	ldi	r21, 0x41	; 65
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	0f c0       	rjmp	.+30     	; 0x166a <Eeprom_u8ClearDevice+0x204>
    164c:	88 ec       	ldi	r24, 0xC8	; 200
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9c 83       	std	Y+4, r25	; 0x04
    1652:	8b 83       	std	Y+3, r24	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <Eeprom_u8ClearDevice+0x1f2>
    165c:	9c 83       	std	Y+4, r25	; 0x04
    165e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	69 f7       	brne	.-38     	; 0x164c <Eeprom_u8ClearDevice+0x1e6>
    1672:	14 c0       	rjmp	.+40     	; 0x169c <Eeprom_u8ClearDevice+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <Eeprom_u8ClearDevice+0x22e>
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
		}
	}
	else if(DeviceId == Device_1)
	{
		for(i=0; i<Num_Location; i++)
    169c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	9e 8f       	std	Y+30, r25	; 0x1e
    16a4:	8d 8f       	std	Y+29, r24	; 0x1d
    16a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16aa:	88 a1       	ldd	r24, Y+32	; 0x20
    16ac:	99 a1       	ldd	r25, Y+33	; 0x21
    16ae:	28 17       	cp	r18, r24
    16b0:	39 07       	cpc	r19, r25
    16b2:	08 f4       	brcc	.+2      	; 0x16b6 <Eeprom_u8ClearDevice+0x250>
    16b4:	7a cf       	rjmp	.-268    	; 0x15aa <Eeprom_u8ClearDevice+0x144>
			Eeprom_u8WiteByte(Device_1 , i , 0);
			_delay_ms(10);
		}
	}

}
    16b6:	a1 96       	adiw	r28, 0x21	; 33
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <I2c_vidInit>:
#include "I2c_priv.h"
#include "I2c_int.h"


void I2c_vidInit(void)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
	/* Enable I2C */
	TWCR.Bits.TWEN = 1;
    16d0:	e6 e5       	ldi	r30, 0x56	; 86
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	84 60       	ori	r24, 0x04	; 4
    16d8:	80 83       	st	Z, r24

	/* Enable Receiver Acknowledge */
	TWCR.Bits.TWEA =1;
    16da:	e6 e5       	ldi	r30, 0x56	; 86
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	80 64       	ori	r24, 0x40	; 64
    16e2:	80 83       	st	Z, r24

	/* Select SCL = Fcpu / (16 + (2xTWBRX4^TWPS)) = 250KHZ */
	TWBR.Byte = 2;
    16e4:	e0 e2       	ldi	r30, 0x20	; 32
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	80 83       	st	Z, r24
	TWSR.Bits.TWPS = 0;
    16ec:	e1 e2       	ldi	r30, 0x21	; 33
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8c 7f       	andi	r24, 0xFC	; 252
    16f4:	80 83       	st	Z, r24

	/* Device Own Address = 1 and Disable General Call */
	TWAR.Bits.WGCE = 0;
    16f6:	e2 e2       	ldi	r30, 0x22	; 34
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8e 7f       	andi	r24, 0xFE	; 254
    16fe:	80 83       	st	Z, r24
	TWAR.Bits.TWA  = 1;
    1700:	e2 e2       	ldi	r30, 0x22	; 34
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	81 70       	andi	r24, 0x01	; 1
    1708:	82 60       	ori	r24, 0x02	; 2
    170a:	80 83       	st	Z, r24
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <I2c_vidSendStart>:


void I2c_vidSendStart(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62

	/* Update Value In TWCR Register
	 * Send Start Bit
	 * Clear Flag                  */
	TWCR.Byte = (1<<TWINT_BIT) | (1<<TWSTA_BIT) | (1<<TWEN_BIT);
    171a:	e6 e5       	ldi	r30, 0x56	; 86
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	84 ea       	ldi	r24, 0xA4	; 164
    1720:	80 83       	st	Z, r24

	/* Wait Till The Job Done */
	while(TWCR.Bits.TWINT == 0);
    1722:	e6 e5       	ldi	r30, 0x56	; 86
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 78       	andi	r24, 0x80	; 128
    172a:	88 23       	and	r24, r24
    172c:	d1 f3       	breq	.-12     	; 0x1722 <I2c_vidSendStart+0x10>

}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <I2c_vidSendStop>:


void I2c_vidSendStop(void)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62

	/* Update Value In TWCR Register
	 * Send Stop Bit
	 * Clear Start Bit
	 * Clear Flag                  */
	TWCR.Byte = (1<<TWINT_BIT) | (1<<TWSTO_BIT) | (1<<TWEN_BIT);
    173c:	e6 e5       	ldi	r30, 0x56	; 86
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	84 e9       	ldi	r24, 0x94	; 148
    1742:	80 83       	st	Z, r24

}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <I2c_vidSendSlaveAddess>:


void I2c_vidSendSlaveAddess(u8 SlaveAddress_W_R)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	89 83       	std	Y+1, r24	; 0x01

	/*  Load SLA in TWDR */
	TWDR.Byte = SlaveAddress_W_R ;
    1756:	e3 e2       	ldi	r30, 0x23	; 35
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	80 83       	st	Z, r24

	/* Update Value In TWCR Register
	 * Clear Start Bit
	 * Clear Flag                  */
	TWCR.Byte = (1<<TWINT_BIT) | (1<<TWEN_BIT);
    175e:	e6 e5       	ldi	r30, 0x56	; 86
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	84 e8       	ldi	r24, 0x84	; 132
    1764:	80 83       	st	Z, r24


	/* Wait Till The Job Done */
	while(TWCR.Bits.TWINT == 0);
    1766:	e6 e5       	ldi	r30, 0x56	; 86
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 78       	andi	r24, 0x80	; 128
    176e:	88 23       	and	r24, r24
    1770:	d1 f3       	breq	.-12     	; 0x1766 <I2c_vidSendSlaveAddess+0x1c>

}
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <I2c_vidSendData>:


void I2c_vidSendData(u8 Data)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01

	/*  Load SLA in TWDR */
	TWDR.Byte = Data ;
    1786:	e3 e2       	ldi	r30, 0x23	; 35
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	80 83       	st	Z, r24

	/* Update Value In TWCR Register
	 * Clear Start Bit
	 * Clear Flag                  */
	TWCR.Byte = (1<<TWINT_BIT) | (1<<TWEN_BIT);
    178e:	e6 e5       	ldi	r30, 0x56	; 86
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	84 e8       	ldi	r24, 0x84	; 132
    1794:	80 83       	st	Z, r24

	/* Wait Till The Job Done */
	while(TWCR.Bits.TWINT == 0);
    1796:	e6 e5       	ldi	r30, 0x56	; 86
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 78       	andi	r24, 0x80	; 128
    179e:	88 23       	and	r24, r24
    17a0:	d1 f3       	breq	.-12     	; 0x1796 <I2c_vidSendData+0x1c>

}
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <I2c_vidReceiveData>:


u8   I2c_vidReceiveData(void)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62

	/* Update Value In TWCR Register
	 * Clear Start Bit
	 * Clear Flag                  */
	TWCR.Byte = (1<<TWINT_BIT) | (1<<TWEN_BIT);
    17b2:	e6 e5       	ldi	r30, 0x56	; 86
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	84 e8       	ldi	r24, 0x84	; 132
    17b8:	80 83       	st	Z, r24

	/* Wait Till The Job Done */
	while(TWCR.Bits.TWINT == 0);
    17ba:	e6 e5       	ldi	r30, 0x56	; 86
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 78       	andi	r24, 0x80	; 128
    17c2:	88 23       	and	r24, r24
    17c4:	d1 f3       	breq	.-12     	; 0x17ba <I2c_vidReceiveData+0x10>

	/* Return The Receive Data */
	return TWDR.Byte;
    17c6:	e3 e2       	ldi	r30, 0x23	; 35
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z

}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <I2c_u8CheckStatus>:


u8   I2c_u8CheckStatus(u8 ExpectStatus)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <I2c_u8CheckStatus+0x6>
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01

	if(ExpectStatus == (TWSR.Byte & 0xF8))   //0b1111 1000
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	e1 e2       	ldi	r30, 0x21	; 33
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	88 7f       	andi	r24, 0xF8	; 248
    17f0:	90 70       	andi	r25, 0x00	; 0
    17f2:	28 17       	cp	r18, r24
    17f4:	39 07       	cpc	r19, r25
    17f6:	19 f4       	brne	.+6      	; 0x17fe <I2c_u8CheckStatus+0x2c>
	{
		return 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	8a 83       	std	Y+2, r24	; 0x02
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <I2c_u8CheckStatus+0x2e>
	}
	return 0;
    17fe:	1a 82       	std	Y+2, r1	; 0x02
    1800:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <Keypad_vidInit>:
#include "Dio_int.h"
#include "Keypad_int.h"


void Keypad_vidInit(void)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(KEYPAD_u8R1_PIN , DIO_u8OUTPUT);
    1814:	82 e1       	ldi	r24, 0x12	; 18
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R2_PIN , DIO_u8OUTPUT);
    181c:	83 e1       	ldi	r24, 0x13	; 19
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R3_PIN , DIO_u8OUTPUT);
    1824:	84 e1       	ldi	r24, 0x14	; 20
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8R4_PIN , DIO_u8OUTPUT);
    182c:	85 e1       	ldi	r24, 0x15	; 21
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C1_PIN , DIO_u8INPUT);
    1834:	86 e1       	ldi	r24, 0x16	; 22
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C2_PIN , DIO_u8INPUT);
    183c:	87 e1       	ldi	r24, 0x17	; 23
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C3_PIN , DIO_u8INPUT);
    1844:	86 e0       	ldi	r24, 0x06	; 6
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	Dio_vidSetPinDir(KEYPAD_u8C4_PIN , DIO_u8INPUT);
    184c:	87 e0       	ldi	r24, 0x07	; 7
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    1854:	82 e1       	ldi	r24, 0x12	; 18
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    185c:	83 e1       	ldi	r24, 0x13	; 19
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    1864:	84 e1       	ldi	r24, 0x14	; 20
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    186c:	85 e1       	ldi	r24, 0x15	; 21
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C1_PIN , DIO_u8HIGH);
    1874:	86 e1       	ldi	r24, 0x16	; 22
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C2_PIN , DIO_u8HIGH);
    187c:	87 e1       	ldi	r24, 0x17	; 23
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C3_PIN , DIO_u8HIGH);
    1884:	86 e0       	ldi	r24, 0x06	; 6
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8C4_PIN , DIO_u8HIGH);
    188c:	87 e0       	ldi	r24, 0x07	; 7
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>

}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	2e 97       	sbiw	r28, 0x0e	; 14
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
	u8 pin_c2;
	u8 pin_c3;
	u8 pin_c4;
	u8 temp;

	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8LOW);
    18ae:	82 e1       	ldi	r24, 0x12	; 18
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    18b6:	83 e1       	ldi	r24, 0x13	; 19
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    18be:	84 e1       	ldi	r24, 0x14	; 20
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    18c6:	85 e1       	ldi	r24, 0x15	; 21
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>

	//create mask to get value of pins
	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    18ce:	86 e1       	ldi	r24, 0x16	; 22
    18d0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    18d4:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    18d6:	87 e1       	ldi	r24, 0x17	; 23
    18d8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    18dc:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    18de:	86 e0       	ldi	r24, 0x06	; 6
    18e0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    18e4:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    18e6:	87 e0       	ldi	r24, 0x07	; 7
    18e8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    18ec:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    18ee:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	82 95       	swap	r24
    18f8:	92 95       	swap	r25
    18fa:	90 7f       	andi	r25, 0xF0	; 240
    18fc:	98 27       	eor	r25, r24
    18fe:	80 7f       	andi	r24, 0xF0	; 240
    1900:	98 27       	eor	r25, r24
    1902:	98 2f       	mov	r25, r24
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	89 2b       	or	r24, r25
    1908:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	82 95       	swap	r24
    1916:	92 95       	swap	r25
    1918:	90 7f       	andi	r25, 0xF0	; 240
    191a:	98 27       	eor	r25, r24
    191c:	80 7f       	andi	r24, 0xF0	; 240
    191e:	98 27       	eor	r25, r24
    1920:	98 2f       	mov	r25, r24
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	89 2b       	or	r24, r25
    1926:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	00 24       	eor	r0, r0
    1930:	96 95       	lsr	r25
    1932:	87 95       	ror	r24
    1934:	07 94       	ror	r0
    1936:	96 95       	lsr	r25
    1938:	87 95       	ror	r24
    193a:	07 94       	ror	r0
    193c:	98 2f       	mov	r25, r24
    193e:	80 2d       	mov	r24, r0
    1940:	98 2f       	mov	r25, r24
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	89 2b       	or	r24, r25
    1946:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	96 95       	lsr	r25
    1950:	98 2f       	mov	r25, r24
    1952:	88 27       	eor	r24, r24
    1954:	97 95       	ror	r25
    1956:	87 95       	ror	r24
    1958:	98 2f       	mov	r25, r24
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	89 2b       	or	r24, r25
    195e:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3e 87       	std	Y+14, r19	; 0x0e
    1968:	2d 87       	std	Y+13, r18	; 0x0d
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	80 3b       	cpi	r24, 0xB0	; 176
    1970:	91 05       	cpc	r25, r1
    1972:	d9 f0       	breq	.+54     	; 0x19aa <Keypad_u8GetKey+0x110>
    1974:	2d 85       	ldd	r18, Y+13	; 0x0d
    1976:	3e 85       	ldd	r19, Y+14	; 0x0e
    1978:	21 3b       	cpi	r18, 0xB1	; 177
    197a:	31 05       	cpc	r19, r1
    197c:	34 f4       	brge	.+12     	; 0x198a <Keypad_u8GetKey+0xf0>
    197e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1980:	9e 85       	ldd	r25, Y+14	; 0x0e
    1982:	80 37       	cpi	r24, 0x70	; 112
    1984:	91 05       	cpc	r25, r1
    1986:	a1 f0       	breq	.+40     	; 0x19b0 <Keypad_u8GetKey+0x116>
    1988:	16 c0       	rjmp	.+44     	; 0x19b6 <Keypad_u8GetKey+0x11c>
    198a:	2d 85       	ldd	r18, Y+13	; 0x0d
    198c:	3e 85       	ldd	r19, Y+14	; 0x0e
    198e:	20 3d       	cpi	r18, 0xD0	; 208
    1990:	31 05       	cpc	r19, r1
    1992:	41 f0       	breq	.+16     	; 0x19a4 <Keypad_u8GetKey+0x10a>
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	80 3e       	cpi	r24, 0xE0	; 224
    199a:	91 05       	cpc	r25, r1
    199c:	61 f4       	brne	.+24     	; 0x19b6 <Keypad_u8GetKey+0x11c>
	{
		case 0b11100000:
			return KEYPAD_u8R1C1_KEY;
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	9c 87       	std	Y+12, r25	; 0x0c
    19a2:	96 c1       	rjmp	.+812    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R1C2_KEY;
    19a4:	22 e0       	ldi	r18, 0x02	; 2
    19a6:	2c 87       	std	Y+12, r18	; 0x0c
    19a8:	93 c1       	rjmp	.+806    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R1C3_KEY;
    19aa:	33 e0       	ldi	r19, 0x03	; 3
    19ac:	3c 87       	std	Y+12, r19	; 0x0c
    19ae:	90 c1       	rjmp	.+800    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R1C4_KEY;
    19b0:	8b e2       	ldi	r24, 0x2B	; 43
    19b2:	8c 87       	std	Y+12, r24	; 0x0c
    19b4:	8d c1       	rjmp	.+794    	; 0x1cd0 <Keypad_u8GetKey+0x436>
	}


	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    19b6:	82 e1       	ldi	r24, 0x12	; 18
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8LOW);
    19be:	83 e1       	ldi	r24, 0x13	; 19
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    19c6:	84 e1       	ldi	r24, 0x14	; 20
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    19ce:	85 e1       	ldi	r24, 0x15	; 21
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>


	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    19d6:	86 e1       	ldi	r24, 0x16	; 22
    19d8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    19dc:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    19de:	87 e1       	ldi	r24, 0x17	; 23
    19e0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    19e4:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    19e6:	86 e0       	ldi	r24, 0x06	; 6
    19e8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    19ec:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    19ee:	87 e0       	ldi	r24, 0x07	; 7
    19f0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    19f4:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    19f6:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	82 95       	swap	r24
    1a00:	92 95       	swap	r25
    1a02:	90 7f       	andi	r25, 0xF0	; 240
    1a04:	98 27       	eor	r25, r24
    1a06:	80 7f       	andi	r24, 0xF0	; 240
    1a08:	98 27       	eor	r25, r24
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	89 2b       	or	r24, r25
    1a10:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	82 95       	swap	r24
    1a1e:	92 95       	swap	r25
    1a20:	90 7f       	andi	r25, 0xF0	; 240
    1a22:	98 27       	eor	r25, r24
    1a24:	80 7f       	andi	r24, 0xF0	; 240
    1a26:	98 27       	eor	r25, r24
    1a28:	98 2f       	mov	r25, r24
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	89 2b       	or	r24, r25
    1a2e:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	00 24       	eor	r0, r0
    1a38:	96 95       	lsr	r25
    1a3a:	87 95       	ror	r24
    1a3c:	07 94       	ror	r0
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	07 94       	ror	r0
    1a44:	98 2f       	mov	r25, r24
    1a46:	80 2d       	mov	r24, r0
    1a48:	98 2f       	mov	r25, r24
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	89 2b       	or	r24, r25
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	96 95       	lsr	r25
    1a58:	98 2f       	mov	r25, r24
    1a5a:	88 27       	eor	r24, r24
    1a5c:	97 95       	ror	r25
    1a5e:	87 95       	ror	r24
    1a60:	98 2f       	mov	r25, r24
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	89 2b       	or	r24, r25
    1a66:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	3b 87       	std	Y+11, r19	; 0x0b
    1a70:	2a 87       	std	Y+10, r18	; 0x0a
    1a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a76:	80 3b       	cpi	r24, 0xB0	; 176
    1a78:	91 05       	cpc	r25, r1
    1a7a:	d9 f0       	breq	.+54     	; 0x1ab2 <Keypad_u8GetKey+0x218>
    1a7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a7e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a80:	21 3b       	cpi	r18, 0xB1	; 177
    1a82:	31 05       	cpc	r19, r1
    1a84:	34 f4       	brge	.+12     	; 0x1a92 <Keypad_u8GetKey+0x1f8>
    1a86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8a:	80 37       	cpi	r24, 0x70	; 112
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	a1 f0       	breq	.+40     	; 0x1ab8 <Keypad_u8GetKey+0x21e>
    1a90:	16 c0       	rjmp	.+44     	; 0x1abe <Keypad_u8GetKey+0x224>
    1a92:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a94:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a96:	20 3d       	cpi	r18, 0xD0	; 208
    1a98:	31 05       	cpc	r19, r1
    1a9a:	41 f0       	breq	.+16     	; 0x1aac <Keypad_u8GetKey+0x212>
    1a9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aa0:	80 3e       	cpi	r24, 0xE0	; 224
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	61 f4       	brne	.+24     	; 0x1abe <Keypad_u8GetKey+0x224>
	{
		case 0b11100000:
			return KEYPAD_u8R2C1_KEY;
    1aa6:	94 e0       	ldi	r25, 0x04	; 4
    1aa8:	9c 87       	std	Y+12, r25	; 0x0c
    1aaa:	12 c1       	rjmp	.+548    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R2C2_KEY;
    1aac:	25 e0       	ldi	r18, 0x05	; 5
    1aae:	2c 87       	std	Y+12, r18	; 0x0c
    1ab0:	0f c1       	rjmp	.+542    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R2C3_KEY;
    1ab2:	36 e0       	ldi	r19, 0x06	; 6
    1ab4:	3c 87       	std	Y+12, r19	; 0x0c
    1ab6:	0c c1       	rjmp	.+536    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R2C4_KEY;
    1ab8:	8d e2       	ldi	r24, 0x2D	; 45
    1aba:	8c 87       	std	Y+12, r24	; 0x0c
    1abc:	09 c1       	rjmp	.+530    	; 0x1cd0 <Keypad_u8GetKey+0x436>
	}


	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    1abe:	82 e1       	ldi	r24, 0x12	; 18
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    1ac6:	83 e1       	ldi	r24, 0x13	; 19
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8LOW);
    1ace:	84 e1       	ldi	r24, 0x14	; 20
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8HIGH);
    1ad6:	85 e1       	ldi	r24, 0x15	; 21
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>


	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    1ade:	86 e1       	ldi	r24, 0x16	; 22
    1ae0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    1ae6:	87 e1       	ldi	r24, 0x17	; 23
    1ae8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1aec:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    1aee:	86 e0       	ldi	r24, 0x06	; 6
    1af0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1af4:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    1af6:	87 e0       	ldi	r24, 0x07	; 7
    1af8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1afc:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    1afe:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	82 95       	swap	r24
    1b08:	92 95       	swap	r25
    1b0a:	90 7f       	andi	r25, 0xF0	; 240
    1b0c:	98 27       	eor	r25, r24
    1b0e:	80 7f       	andi	r24, 0xF0	; 240
    1b10:	98 27       	eor	r25, r24
    1b12:	98 2f       	mov	r25, r24
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	89 2b       	or	r24, r25
    1b18:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	82 95       	swap	r24
    1b26:	92 95       	swap	r25
    1b28:	90 7f       	andi	r25, 0xF0	; 240
    1b2a:	98 27       	eor	r25, r24
    1b2c:	80 7f       	andi	r24, 0xF0	; 240
    1b2e:	98 27       	eor	r25, r24
    1b30:	98 2f       	mov	r25, r24
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	89 2b       	or	r24, r25
    1b36:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	00 24       	eor	r0, r0
    1b40:	96 95       	lsr	r25
    1b42:	87 95       	ror	r24
    1b44:	07 94       	ror	r0
    1b46:	96 95       	lsr	r25
    1b48:	87 95       	ror	r24
    1b4a:	07 94       	ror	r0
    1b4c:	98 2f       	mov	r25, r24
    1b4e:	80 2d       	mov	r24, r0
    1b50:	98 2f       	mov	r25, r24
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	89 2b       	or	r24, r25
    1b56:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	88 2f       	mov	r24, r24
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	96 95       	lsr	r25
    1b60:	98 2f       	mov	r25, r24
    1b62:	88 27       	eor	r24, r24
    1b64:	97 95       	ror	r25
    1b66:	87 95       	ror	r24
    1b68:	98 2f       	mov	r25, r24
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	89 2b       	or	r24, r25
    1b6e:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	39 87       	std	Y+9, r19	; 0x09
    1b78:	28 87       	std	Y+8, r18	; 0x08
    1b7a:	88 85       	ldd	r24, Y+8	; 0x08
    1b7c:	99 85       	ldd	r25, Y+9	; 0x09
    1b7e:	80 3b       	cpi	r24, 0xB0	; 176
    1b80:	91 05       	cpc	r25, r1
    1b82:	d9 f0       	breq	.+54     	; 0x1bba <Keypad_u8GetKey+0x320>
    1b84:	28 85       	ldd	r18, Y+8	; 0x08
    1b86:	39 85       	ldd	r19, Y+9	; 0x09
    1b88:	21 3b       	cpi	r18, 0xB1	; 177
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	34 f4       	brge	.+12     	; 0x1b9a <Keypad_u8GetKey+0x300>
    1b8e:	88 85       	ldd	r24, Y+8	; 0x08
    1b90:	99 85       	ldd	r25, Y+9	; 0x09
    1b92:	80 37       	cpi	r24, 0x70	; 112
    1b94:	91 05       	cpc	r25, r1
    1b96:	a1 f0       	breq	.+40     	; 0x1bc0 <Keypad_u8GetKey+0x326>
    1b98:	16 c0       	rjmp	.+44     	; 0x1bc6 <Keypad_u8GetKey+0x32c>
    1b9a:	28 85       	ldd	r18, Y+8	; 0x08
    1b9c:	39 85       	ldd	r19, Y+9	; 0x09
    1b9e:	20 3d       	cpi	r18, 0xD0	; 208
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	41 f0       	breq	.+16     	; 0x1bb4 <Keypad_u8GetKey+0x31a>
    1ba4:	88 85       	ldd	r24, Y+8	; 0x08
    1ba6:	99 85       	ldd	r25, Y+9	; 0x09
    1ba8:	80 3e       	cpi	r24, 0xE0	; 224
    1baa:	91 05       	cpc	r25, r1
    1bac:	61 f4       	brne	.+24     	; 0x1bc6 <Keypad_u8GetKey+0x32c>
	{
		case 0b11100000:
			return KEYPAD_u8R3C1_KEY;
    1bae:	97 e0       	ldi	r25, 0x07	; 7
    1bb0:	9c 87       	std	Y+12, r25	; 0x0c
    1bb2:	8e c0       	rjmp	.+284    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R3C2_KEY;
    1bb4:	28 e0       	ldi	r18, 0x08	; 8
    1bb6:	2c 87       	std	Y+12, r18	; 0x0c
    1bb8:	8b c0       	rjmp	.+278    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R3C3_KEY;
    1bba:	39 e0       	ldi	r19, 0x09	; 9
    1bbc:	3c 87       	std	Y+12, r19	; 0x0c
    1bbe:	88 c0       	rjmp	.+272    	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R3C4_KEY;
    1bc0:	8a e2       	ldi	r24, 0x2A	; 42
    1bc2:	8c 87       	std	Y+12, r24	; 0x0c
    1bc4:	85 c0       	rjmp	.+266    	; 0x1cd0 <Keypad_u8GetKey+0x436>
	}


	Dio_vidSetPinVal(KEYPAD_u8R1_PIN , DIO_u8HIGH);
    1bc6:	82 e1       	ldi	r24, 0x12	; 18
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R2_PIN , DIO_u8HIGH);
    1bce:	83 e1       	ldi	r24, 0x13	; 19
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R3_PIN , DIO_u8HIGH);
    1bd6:	84 e1       	ldi	r24, 0x14	; 20
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(KEYPAD_u8R4_PIN , DIO_u8LOW);
    1bde:	85 e1       	ldi	r24, 0x15	; 21
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>


	pin_c1 = Dio_u8GetPinVal(KEYPAD_u8C1_PIN);
    1be6:	86 e1       	ldi	r24, 0x16	; 22
    1be8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1bec:	8d 83       	std	Y+5, r24	; 0x05
	pin_c2 = Dio_u8GetPinVal(KEYPAD_u8C2_PIN);
    1bee:	87 e1       	ldi	r24, 0x17	; 23
    1bf0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1bf4:	8c 83       	std	Y+4, r24	; 0x04
	pin_c3 = Dio_u8GetPinVal(KEYPAD_u8C3_PIN);
    1bf6:	86 e0       	ldi	r24, 0x06	; 6
    1bf8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1bfc:	8b 83       	std	Y+3, r24	; 0x03
	pin_c4 = Dio_u8GetPinVal(KEYPAD_u8C4_PIN);
    1bfe:	87 e0       	ldi	r24, 0x07	; 7
    1c00:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Dio_u8GetPinVal>
    1c04:	8a 83       	std	Y+2, r24	; 0x02

	temp = 0;
    1c06:	19 82       	std	Y+1, r1	; 0x01
	temp |= (pin_c1 <<4);
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	82 95       	swap	r24
    1c10:	92 95       	swap	r25
    1c12:	90 7f       	andi	r25, 0xF0	; 240
    1c14:	98 27       	eor	r25, r24
    1c16:	80 7f       	andi	r24, 0xF0	; 240
    1c18:	98 27       	eor	r25, r24
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	89 2b       	or	r24, r25
    1c20:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c2 <<5);
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	82 95       	swap	r24
    1c2e:	92 95       	swap	r25
    1c30:	90 7f       	andi	r25, 0xF0	; 240
    1c32:	98 27       	eor	r25, r24
    1c34:	80 7f       	andi	r24, 0xF0	; 240
    1c36:	98 27       	eor	r25, r24
    1c38:	98 2f       	mov	r25, r24
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	89 2b       	or	r24, r25
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c3 <<6);
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	00 24       	eor	r0, r0
    1c48:	96 95       	lsr	r25
    1c4a:	87 95       	ror	r24
    1c4c:	07 94       	ror	r0
    1c4e:	96 95       	lsr	r25
    1c50:	87 95       	ror	r24
    1c52:	07 94       	ror	r0
    1c54:	98 2f       	mov	r25, r24
    1c56:	80 2d       	mov	r24, r0
    1c58:	98 2f       	mov	r25, r24
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	89 2b       	or	r24, r25
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	temp |= (pin_c4 <<7);
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	96 95       	lsr	r25
    1c68:	98 2f       	mov	r25, r24
    1c6a:	88 27       	eor	r24, r24
    1c6c:	97 95       	ror	r25
    1c6e:	87 95       	ror	r24
    1c70:	98 2f       	mov	r25, r24
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	89 2b       	or	r24, r25
    1c76:	89 83       	std	Y+1, r24	; 0x01

	switch(temp)
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3f 83       	std	Y+7, r19	; 0x07
    1c80:	2e 83       	std	Y+6, r18	; 0x06
    1c82:	8e 81       	ldd	r24, Y+6	; 0x06
    1c84:	9f 81       	ldd	r25, Y+7	; 0x07
    1c86:	80 3b       	cpi	r24, 0xB0	; 176
    1c88:	91 05       	cpc	r25, r1
    1c8a:	d1 f0       	breq	.+52     	; 0x1cc0 <Keypad_u8GetKey+0x426>
    1c8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c90:	21 3b       	cpi	r18, 0xB1	; 177
    1c92:	31 05       	cpc	r19, r1
    1c94:	34 f4       	brge	.+12     	; 0x1ca2 <Keypad_u8GetKey+0x408>
    1c96:	8e 81       	ldd	r24, Y+6	; 0x06
    1c98:	9f 81       	ldd	r25, Y+7	; 0x07
    1c9a:	80 37       	cpi	r24, 0x70	; 112
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	99 f0       	breq	.+38     	; 0x1cc6 <Keypad_u8GetKey+0x42c>
    1ca0:	15 c0       	rjmp	.+42     	; 0x1ccc <Keypad_u8GetKey+0x432>
    1ca2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ca6:	20 3d       	cpi	r18, 0xD0	; 208
    1ca8:	31 05       	cpc	r19, r1
    1caa:	41 f0       	breq	.+16     	; 0x1cbc <Keypad_u8GetKey+0x422>
    1cac:	8e 81       	ldd	r24, Y+6	; 0x06
    1cae:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb0:	80 3e       	cpi	r24, 0xE0	; 224
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	59 f4       	brne	.+22     	; 0x1ccc <Keypad_u8GetKey+0x432>
	{
		case 0b11100000:
			return KEYPAD_u8R4C1_KEY;
    1cb6:	93 e2       	ldi	r25, 0x23	; 35
    1cb8:	9c 87       	std	Y+12, r25	; 0x0c
    1cba:	0a c0       	rjmp	.+20     	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b11010000:
			return KEYPAD_u8R4C2_KEY;
    1cbc:	1c 86       	std	Y+12, r1	; 0x0c
    1cbe:	08 c0       	rjmp	.+16     	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b10110000:
			return KEYPAD_u8R4C3_KEY;
    1cc0:	2d e3       	ldi	r18, 0x3D	; 61
    1cc2:	2c 87       	std	Y+12, r18	; 0x0c
    1cc4:	05 c0       	rjmp	.+10     	; 0x1cd0 <Keypad_u8GetKey+0x436>
		case 0b01110000:
			return KEYPAD_u8R4C4_KEY;
    1cc6:	3f e2       	ldi	r19, 0x2F	; 47
    1cc8:	3c 87       	std	Y+12, r19	; 0x0c
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <Keypad_u8GetKey+0x436>
	}


	return KEYPAD_u8NO_KEY;
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	8c 87       	std	Y+12, r24	; 0x0c
    1cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
	}
    1cd2:	2e 96       	adiw	r28, 0x0e	; 14
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <Lcd_vidSendCommand>:
#include <util/delay.h>
#include "Lcd_int.h"
#include "Dio_int.h"
#include "Lcd_cfg.h"
void Lcd_vidSendCommand(u8 Cmd)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	2f 97       	sbiw	r28, 0x0f	; 15
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	8f 87       	std	Y+15, r24	; 0x0f
	//Start to change in LCD control Reg to indicate it that you will receive command
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8LOW);  //make RS->0 to indicate LCD "you will receive command not data"
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //make RW->0 to indicate LCD "you will write in command Register"
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH); //make EN->1 to indicate LCD "Please LCD don't save any thing in your buffer until be sure all data sent "
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>

	//In prof_code we can't send all data '8_bit'  for PORT at the same time so we use GET_BIT
	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Cmd,0));
    1d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d14:	98 2f       	mov	r25, r24
    1d16:	91 70       	andi	r25, 0x01	; 1
    1d18:	83 e0       	ldi	r24, 0x03	; 3
    1d1a:	69 2f       	mov	r22, r25
    1d1c:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Cmd,1));
    1d20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d22:	86 95       	lsr	r24
    1d24:	98 2f       	mov	r25, r24
    1d26:	91 70       	andi	r25, 0x01	; 1
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	69 2f       	mov	r22, r25
    1d2c:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Cmd,2));
    1d30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d32:	86 95       	lsr	r24
    1d34:	86 95       	lsr	r24
    1d36:	98 2f       	mov	r25, r24
    1d38:	91 70       	andi	r25, 0x01	; 1
    1d3a:	8a e1       	ldi	r24, 0x1A	; 26
    1d3c:	69 2f       	mov	r22, r25
    1d3e:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Cmd,3));
    1d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d44:	86 95       	lsr	r24
    1d46:	86 95       	lsr	r24
    1d48:	86 95       	lsr	r24
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	91 70       	andi	r25, 0x01	; 1
    1d4e:	8b e1       	ldi	r24, 0x1B	; 27
    1d50:	69 2f       	mov	r22, r25
    1d52:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Cmd,4));
    1d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d58:	82 95       	swap	r24
    1d5a:	8f 70       	andi	r24, 0x0F	; 15
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	91 70       	andi	r25, 0x01	; 1
    1d60:	8c e1       	ldi	r24, 0x1C	; 28
    1d62:	69 2f       	mov	r22, r25
    1d64:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Cmd,5));
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	82 95       	swap	r24
    1d6c:	86 95       	lsr	r24
    1d6e:	87 70       	andi	r24, 0x07	; 7
    1d70:	98 2f       	mov	r25, r24
    1d72:	91 70       	andi	r25, 0x01	; 1
    1d74:	85 e0       	ldi	r24, 0x05	; 5
    1d76:	69 2f       	mov	r22, r25
    1d78:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Cmd,6));
    1d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7e:	82 95       	swap	r24
    1d80:	86 95       	lsr	r24
    1d82:	86 95       	lsr	r24
    1d84:	83 70       	andi	r24, 0x03	; 3
    1d86:	98 2f       	mov	r25, r24
    1d88:	91 70       	andi	r25, 0x01	; 1
    1d8a:	8e e1       	ldi	r24, 0x1E	; 30
    1d8c:	69 2f       	mov	r22, r25
    1d8e:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Cmd,7));
    1d92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d94:	98 2f       	mov	r25, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	99 27       	eor	r25, r25
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	8f e1       	ldi	r24, 0x1F	; 31
    1d9e:	69 2f       	mov	r22, r25
    1da0:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e4       	ldi	r27, 0x40	; 64
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
    1dae:	9c 87       	std	Y+12, r25	; 0x0c
    1db0:	ad 87       	std	Y+13, r26	; 0x0d
    1db2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a ef       	ldi	r20, 0xFA	; 250
    1dc2:	54 e4       	ldi	r21, 0x44	; 68
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8f 83       	std	Y+7, r24	; 0x07
    1dce:	98 87       	std	Y+8, r25	; 0x08
    1dd0:	a9 87       	std	Y+9, r26	; 0x09
    1dd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <Lcd_vidSendCommand+0x172>
    1e38:	88 ec       	ldi	r24, 0xC8	; 200
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <Lcd_vidSendCommand+0x160>
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <Lcd_vidSendCommand+0x154>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <Lcd_vidSendCommand+0x19c>
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //make EN->0 to indicate LCD "NOW you can save bits in your buffer all data sent"
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>

}
    1e90:	2f 96       	adiw	r28, 0x0f	; 15
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <Lcd_vidInit>:

void Lcd_vidInit(void)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	aa 97       	sbiw	r28, 0x2a	; 42
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
	 Dio_vidSetPinDir(LCD_u8RS_PIN , DIO_u8OUTPUT);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8RW_PIN , DIO_u8OUTPUT);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8EN_PIN , DIO_u8OUTPUT);
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>

	 Dio_vidSetPinDir(LCD_u8D0_PIN , DIO_u8OUTPUT);
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D1_PIN , DIO_u8OUTPUT);
    1ed6:	84 e0       	ldi	r24, 0x04	; 4
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D2_PIN , DIO_u8OUTPUT);
    1ede:	8a e1       	ldi	r24, 0x1A	; 26
    1ee0:	61 e0       	ldi	r22, 0x01	; 1
    1ee2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D3_PIN , DIO_u8OUTPUT);
    1ee6:	8b e1       	ldi	r24, 0x1B	; 27
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D4_PIN , DIO_u8OUTPUT);
    1eee:	8c e1       	ldi	r24, 0x1C	; 28
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D5_PIN , DIO_u8OUTPUT);
    1ef6:	85 e0       	ldi	r24, 0x05	; 5
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D6_PIN , DIO_u8OUTPUT);
    1efe:	8e e1       	ldi	r24, 0x1E	; 30
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	 Dio_vidSetPinDir(LCD_u8D7_PIN , DIO_u8OUTPUT);
    1f06:	8f e1       	ldi	r24, 0x1F	; 31
    1f08:	61 e0       	ldi	r22, 0x01	; 1
    1f0a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>

	Lcd_vidSendCommand(LCD_u8CMD_8_BIT_2x16_5x7); //LCD_8BIT_2x16_5x7
    1f0e:	88 e3       	ldi	r24, 0x38	; 56
    1f10:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e0       	ldi	r26, 0x00	; 0
    1f1a:	b0 e4       	ldi	r27, 0x40	; 64
    1f1c:	8f a3       	std	Y+39, r24	; 0x27
    1f1e:	98 a7       	std	Y+40, r25	; 0x28
    1f20:	a9 a7       	std	Y+41, r26	; 0x29
    1f22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6f a1       	ldd	r22, Y+39	; 0x27
    1f26:	78 a5       	ldd	r23, Y+40	; 0x28
    1f28:	89 a5       	ldd	r24, Y+41	; 0x29
    1f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8b a3       	std	Y+35, r24	; 0x23
    1f3e:	9c a3       	std	Y+36, r25	; 0x24
    1f40:	ad a3       	std	Y+37, r26	; 0x25
    1f42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f44:	6b a1       	ldd	r22, Y+35	; 0x23
    1f46:	7c a1       	ldd	r23, Y+36	; 0x24
    1f48:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <Lcd_vidInit+0xc4>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9a a3       	std	Y+34, r25	; 0x22
    1f62:	89 a3       	std	Y+33, r24	; 0x21
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    1f66:	6b a1       	ldd	r22, Y+35	; 0x23
    1f68:	7c a1       	ldd	r23, Y+36	; 0x24
    1f6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f80:	78 a5       	ldd	r23, Y+40	; 0x28
    1f82:	89 a5       	ldd	r24, Y+41	; 0x29
    1f84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9a a3       	std	Y+34, r25	; 0x22
    1fa4:	89 a3       	std	Y+33, r24	; 0x21
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <Lcd_vidInit+0x124>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	98 a3       	std	Y+32, r25	; 0x20
    1fae:	8f 8f       	std	Y+31, r24	; 0x1f
    1fb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb2:	98 a1       	ldd	r25, Y+32	; 0x20
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <Lcd_vidInit+0x112>
    1fb8:	98 a3       	std	Y+32, r25	; 0x20
    1fba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9a a3       	std	Y+34, r25	; 0x22
    1fc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <Lcd_vidInit+0x106>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9a a3       	std	Y+34, r25	; 0x22
    1fe2:	89 a3       	std	Y+33, r24	; 0x21
    1fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fea:	8d 8f       	std	Y+29, r24	; 0x1d
    1fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <Lcd_vidInit+0x14e>
    1ff4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8CMD_DISP_ON_CURS_OFF);
    1ff8:	8c e0       	ldi	r24, 0x0C	; 12
    1ffa:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e4       	ldi	r27, 0x40	; 64
    2006:	89 8f       	std	Y+25, r24	; 0x19
    2008:	9a 8f       	std	Y+26, r25	; 0x1a
    200a:	ab 8f       	std	Y+27, r26	; 0x1b
    200c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200e:	69 8d       	ldd	r22, Y+25	; 0x19
    2010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4a ef       	ldi	r20, 0xFA	; 250
    201c:	54 e4       	ldi	r21, 0x44	; 68
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8d 8b       	std	Y+21, r24	; 0x15
    2028:	9e 8b       	std	Y+22, r25	; 0x16
    202a:	af 8b       	std	Y+23, r26	; 0x17
    202c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    202e:	6d 89       	ldd	r22, Y+21	; 0x15
    2030:	7e 89       	ldd	r23, Y+22	; 0x16
    2032:	8f 89       	ldd	r24, Y+23	; 0x17
    2034:	98 8d       	ldd	r25, Y+24	; 0x18
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	2c f4       	brge	.+10     	; 0x2050 <Lcd_vidInit+0x1ae>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9c 8b       	std	Y+20, r25	; 0x14
    204c:	8b 8b       	std	Y+19, r24	; 0x13
    204e:	3f c0       	rjmp	.+126    	; 0x20ce <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    2050:	6d 89       	ldd	r22, Y+21	; 0x15
    2052:	7e 89       	ldd	r23, Y+22	; 0x16
    2054:	8f 89       	ldd	r24, Y+23	; 0x17
    2056:	98 8d       	ldd	r25, Y+24	; 0x18
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	4c f5       	brge	.+82     	; 0x20ba <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	69 8d       	ldd	r22, Y+25	; 0x19
    206a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    206e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <Lcd_vidInit+0x20e>
    2092:	88 ec       	ldi	r24, 0xC8	; 200
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9a 8b       	std	Y+18, r25	; 0x12
    2098:	89 8b       	std	Y+17, r24	; 0x11
    209a:	89 89       	ldd	r24, Y+17	; 0x11
    209c:	9a 89       	ldd	r25, Y+18	; 0x12
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <Lcd_vidInit+0x1fc>
    20a2:	9a 8b       	std	Y+18, r25	; 0x12
    20a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8b 89       	ldd	r24, Y+19	; 0x13
    20a8:	9c 89       	ldd	r25, Y+20	; 0x14
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	9c 8b       	std	Y+20, r25	; 0x14
    20ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8b 89       	ldd	r24, Y+19	; 0x13
    20b2:	9c 89       	ldd	r25, Y+20	; 0x14
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <Lcd_vidInit+0x1f0>
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	6d 89       	ldd	r22, Y+21	; 0x15
    20bc:	7e 89       	ldd	r23, Y+22	; 0x16
    20be:	8f 89       	ldd	r24, Y+23	; 0x17
    20c0:	98 8d       	ldd	r25, Y+24	; 0x18
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9c 8b       	std	Y+20, r25	; 0x14
    20cc:	8b 8b       	std	Y+19, r24	; 0x13
    20ce:	8b 89       	ldd	r24, Y+19	; 0x13
    20d0:	9c 89       	ldd	r25, Y+20	; 0x14
    20d2:	98 8b       	std	Y+16, r25	; 0x10
    20d4:	8f 87       	std	Y+15, r24	; 0x0f
    20d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d8:	98 89       	ldd	r25, Y+16	; 0x10
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <Lcd_vidInit+0x238>
    20de:	98 8b       	std	Y+16, r25	; 0x10
    20e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8CMD_CLR_Display);
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a0 e0       	ldi	r26, 0x00	; 0
    20ee:	b0 e4       	ldi	r27, 0x40	; 64
    20f0:	8b 87       	std	Y+11, r24	; 0x0b
    20f2:	9c 87       	std	Y+12, r25	; 0x0c
    20f4:	ad 87       	std	Y+13, r26	; 0x0d
    20f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	4a ef       	ldi	r20, 0xFA	; 250
    2106:	54 e4       	ldi	r21, 0x44	; 68
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	8f 83       	std	Y+7, r24	; 0x07
    2112:	98 87       	std	Y+8, r25	; 0x08
    2114:	a9 87       	std	Y+9, r26	; 0x09
    2116:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2118:	6f 81       	ldd	r22, Y+7	; 0x07
    211a:	78 85       	ldd	r23, Y+8	; 0x08
    211c:	89 85       	ldd	r24, Y+9	; 0x09
    211e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	5f e3       	ldi	r21, 0x3F	; 63
    2128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    212c:	88 23       	and	r24, r24
    212e:	2c f4       	brge	.+10     	; 0x213a <Lcd_vidInit+0x298>
		__ticks = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	3f c0       	rjmp	.+126    	; 0x21b8 <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    213a:	6f 81       	ldd	r22, Y+7	; 0x07
    213c:	78 85       	ldd	r23, Y+8	; 0x08
    213e:	89 85       	ldd	r24, Y+9	; 0x09
    2140:	9a 85       	ldd	r25, Y+10	; 0x0a
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	3f ef       	ldi	r19, 0xFF	; 255
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	57 e4       	ldi	r21, 0x47	; 71
    214a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    214e:	18 16       	cp	r1, r24
    2150:	4c f5       	brge	.+82     	; 0x21a4 <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2152:	6b 85       	ldd	r22, Y+11	; 0x0b
    2154:	7c 85       	ldd	r23, Y+12	; 0x0c
    2156:	8d 85       	ldd	r24, Y+13	; 0x0d
    2158:	9e 85       	ldd	r25, Y+14	; 0x0e
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e2       	ldi	r20, 0x20	; 32
    2160:	51 e4       	ldi	r21, 0x41	; 65
    2162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	0f c0       	rjmp	.+30     	; 0x219a <Lcd_vidInit+0x2f8>
    217c:	88 ec       	ldi	r24, 0xC8	; 200
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	9c 81       	ldd	r25, Y+4	; 0x04
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <Lcd_vidInit+0x2e6>
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	8d 81       	ldd	r24, Y+5	; 0x05
    2192:	9e 81       	ldd	r25, Y+6	; 0x06
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	9e 83       	std	Y+6, r25	; 0x06
    2198:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	9e 81       	ldd	r25, Y+6	; 0x06
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	69 f7       	brne	.-38     	; 0x217c <Lcd_vidInit+0x2da>
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <Lcd_vidInit+0x322>
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    21cc:	aa 96       	adiw	r28, 0x2a	; 42
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char)

{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	2f 97       	sbiw	r28, 0x0f	; 15
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN , DIO_u8HIGH);  //RS
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN , DIO_u8LOW);  //RW
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8HIGH);  //EN
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8D0_PIN , GET_BIT(Char,0));
    220c:	8f 85       	ldd	r24, Y+15	; 0x0f
    220e:	98 2f       	mov	r25, r24
    2210:	91 70       	andi	r25, 0x01	; 1
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	69 2f       	mov	r22, r25
    2216:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN , GET_BIT(Char,1));
    221a:	8f 85       	ldd	r24, Y+15	; 0x0f
    221c:	86 95       	lsr	r24
    221e:	98 2f       	mov	r25, r24
    2220:	91 70       	andi	r25, 0x01	; 1
    2222:	84 e0       	ldi	r24, 0x04	; 4
    2224:	69 2f       	mov	r22, r25
    2226:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN , GET_BIT(Char,2));
    222a:	8f 85       	ldd	r24, Y+15	; 0x0f
    222c:	86 95       	lsr	r24
    222e:	86 95       	lsr	r24
    2230:	98 2f       	mov	r25, r24
    2232:	91 70       	andi	r25, 0x01	; 1
    2234:	8a e1       	ldi	r24, 0x1A	; 26
    2236:	69 2f       	mov	r22, r25
    2238:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN , GET_BIT(Char,3));
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	86 95       	lsr	r24
    2240:	86 95       	lsr	r24
    2242:	86 95       	lsr	r24
    2244:	98 2f       	mov	r25, r24
    2246:	91 70       	andi	r25, 0x01	; 1
    2248:	8b e1       	ldi	r24, 0x1B	; 27
    224a:	69 2f       	mov	r22, r25
    224c:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN , GET_BIT(Char,4));
    2250:	8f 85       	ldd	r24, Y+15	; 0x0f
    2252:	82 95       	swap	r24
    2254:	8f 70       	andi	r24, 0x0F	; 15
    2256:	98 2f       	mov	r25, r24
    2258:	91 70       	andi	r25, 0x01	; 1
    225a:	8c e1       	ldi	r24, 0x1C	; 28
    225c:	69 2f       	mov	r22, r25
    225e:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN , GET_BIT(Char,5));
    2262:	8f 85       	ldd	r24, Y+15	; 0x0f
    2264:	82 95       	swap	r24
    2266:	86 95       	lsr	r24
    2268:	87 70       	andi	r24, 0x07	; 7
    226a:	98 2f       	mov	r25, r24
    226c:	91 70       	andi	r25, 0x01	; 1
    226e:	85 e0       	ldi	r24, 0x05	; 5
    2270:	69 2f       	mov	r22, r25
    2272:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN , GET_BIT(Char,6));
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	82 95       	swap	r24
    227a:	86 95       	lsr	r24
    227c:	86 95       	lsr	r24
    227e:	83 70       	andi	r24, 0x03	; 3
    2280:	98 2f       	mov	r25, r24
    2282:	91 70       	andi	r25, 0x01	; 1
    2284:	8e e1       	ldi	r24, 0x1E	; 30
    2286:	69 2f       	mov	r22, r25
    2288:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN , GET_BIT(Char,7));
    228c:	8f 85       	ldd	r24, Y+15	; 0x0f
    228e:	98 2f       	mov	r25, r24
    2290:	99 1f       	adc	r25, r25
    2292:	99 27       	eor	r25, r25
    2294:	99 1f       	adc	r25, r25
    2296:	8f e1       	ldi	r24, 0x1F	; 31
    2298:	69 2f       	mov	r22, r25
    229a:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a0 e0       	ldi	r26, 0x00	; 0
    22a4:	b0 e4       	ldi	r27, 0x40	; 64
    22a6:	8b 87       	std	Y+11, r24	; 0x0b
    22a8:	9c 87       	std	Y+12, r25	; 0x0c
    22aa:	ad 87       	std	Y+13, r26	; 0x0d
    22ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	4a ef       	ldi	r20, 0xFA	; 250
    22bc:	54 e4       	ldi	r21, 0x44	; 68
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	8f 83       	std	Y+7, r24	; 0x07
    22c8:	98 87       	std	Y+8, r25	; 0x08
    22ca:	a9 87       	std	Y+9, r26	; 0x09
    22cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e8       	ldi	r20, 0x80	; 128
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
    22ee:	3f c0       	rjmp	.+126    	; 0x236e <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    22f0:	6f 81       	ldd	r22, Y+7	; 0x07
    22f2:	78 85       	ldd	r23, Y+8	; 0x08
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	57 e4       	ldi	r21, 0x47	; 71
    2300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	4c f5       	brge	.+82     	; 0x235a <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	6b 85       	ldd	r22, Y+11	; 0x0b
    230a:	7c 85       	ldd	r23, Y+12	; 0x0c
    230c:	8d 85       	ldd	r24, Y+13	; 0x0d
    230e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9e 83       	std	Y+6, r25	; 0x06
    232e:	8d 83       	std	Y+5, r24	; 0x05
    2330:	0f c0       	rjmp	.+30     	; 0x2350 <Lcd_vidWriteChar+0x172>
    2332:	88 ec       	ldi	r24, 0xC8	; 200
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <Lcd_vidWriteChar+0x160>
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	9e 81       	ldd	r25, Y+6	; 0x06
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	69 f7       	brne	.-38     	; 0x2332 <Lcd_vidWriteChar+0x154>
    2358:	14 c0       	rjmp	.+40     	; 0x2382 <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235a:	6f 81       	ldd	r22, Y+7	; 0x07
    235c:	78 85       	ldd	r23, Y+8	; 0x08
    235e:	89 85       	ldd	r24, Y+9	; 0x09
    2360:	9a 85       	ldd	r25, Y+10	; 0x0a
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <Lcd_vidWriteChar+0x19c>
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //EN
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
}
    238a:	2f 96       	adiw	r28, 0x0f	; 15
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <Lcd_vidWriteStr>:

void Lcd_vidWriteStr(u8 *Str){
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <Lcd_vidWriteStr+0x6>
    23a2:	0f 92       	push	r0
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9b 83       	std	Y+3, r25	; 0x03
    23aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    23ac:	19 82       	std	Y+1, r1	; 0x01
    23ae:	0e c0       	rjmp	.+28     	; 0x23cc <Lcd_vidWriteStr+0x30>
	while(Str[index] != '\0')
	{
		Lcd_vidWriteChar(Str[index]);
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ba:	fc 01       	movw	r30, r24
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	80 81       	ld	r24, Z
    23c2:	0e 94 ef 10 	call	0x21de	; 0x21de <Lcd_vidWriteChar>
		index++;
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	8f 5f       	subi	r24, 0xFF	; 255
    23ca:	89 83       	std	Y+1, r24	; 0x01
	Dio_vidSetPinVal(LCD_u8EN_PIN , DIO_u8LOW);  //EN
}

void Lcd_vidWriteStr(u8 *Str){
	u8 index = 0;
	while(Str[index] != '\0')
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	9b 81       	ldd	r25, Y+3	; 0x03
    23d6:	fc 01       	movw	r30, r24
    23d8:	e2 0f       	add	r30, r18
    23da:	f3 1f       	adc	r31, r19
    23dc:	80 81       	ld	r24, Z
    23de:	88 23       	and	r24, r24
    23e0:	39 f7       	brne	.-50     	; 0x23b0 <Lcd_vidWriteStr+0x14>
	{
		Lcd_vidWriteChar(Str[index]);
		index++;
	}
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <Led_vidInit>:
#include "Dio_int.h"
#include "Led_int.h"
#include "Led_cfg.h"

void Led_vidInit(u8 LedId)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <Led_vidInit+0x6>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	3b 83       	std	Y+3, r19	; 0x03
    2404:	2a 83       	std	Y+2, r18	; 0x02
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	84 30       	cpi	r24, 0x04	; 4
    240c:	91 05       	cpc	r25, r1
    240e:	c9 f1       	breq	.+114    	; 0x2482 <Led_vidInit+0x94>
    2410:	2a 81       	ldd	r18, Y+2	; 0x02
    2412:	3b 81       	ldd	r19, Y+3	; 0x03
    2414:	25 30       	cpi	r18, 0x05	; 5
    2416:	31 05       	cpc	r19, r1
    2418:	84 f4       	brge	.+32     	; 0x243a <Led_vidInit+0x4c>
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	9b 81       	ldd	r25, Y+3	; 0x03
    241e:	82 30       	cpi	r24, 0x02	; 2
    2420:	91 05       	cpc	r25, r1
    2422:	29 f1       	breq	.+74     	; 0x246e <Led_vidInit+0x80>
    2424:	2a 81       	ldd	r18, Y+2	; 0x02
    2426:	3b 81       	ldd	r19, Y+3	; 0x03
    2428:	23 30       	cpi	r18, 0x03	; 3
    242a:	31 05       	cpc	r19, r1
    242c:	2c f5       	brge	.+74     	; 0x2478 <Led_vidInit+0x8a>
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	9b 81       	ldd	r25, Y+3	; 0x03
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	91 05       	cpc	r25, r1
    2436:	b1 f0       	breq	.+44     	; 0x2464 <Led_vidInit+0x76>
    2438:	3c c0       	rjmp	.+120    	; 0x24b2 <Led_vidInit+0xc4>
    243a:	2a 81       	ldd	r18, Y+2	; 0x02
    243c:	3b 81       	ldd	r19, Y+3	; 0x03
    243e:	26 30       	cpi	r18, 0x06	; 6
    2440:	31 05       	cpc	r19, r1
    2442:	49 f1       	breq	.+82     	; 0x2496 <Led_vidInit+0xa8>
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	86 30       	cpi	r24, 0x06	; 6
    244a:	91 05       	cpc	r25, r1
    244c:	fc f0       	brlt	.+62     	; 0x248c <Led_vidInit+0x9e>
    244e:	2a 81       	ldd	r18, Y+2	; 0x02
    2450:	3b 81       	ldd	r19, Y+3	; 0x03
    2452:	27 30       	cpi	r18, 0x07	; 7
    2454:	31 05       	cpc	r19, r1
    2456:	21 f1       	breq	.+72     	; 0x24a0 <Led_vidInit+0xb2>
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	9b 81       	ldd	r25, Y+3	; 0x03
    245c:	88 30       	cpi	r24, 0x08	; 8
    245e:	91 05       	cpc	r25, r1
    2460:	21 f1       	breq	.+72     	; 0x24aa <Led_vidInit+0xbc>
    2462:	27 c0       	rjmp	.+78     	; 0x24b2 <Led_vidInit+0xc4>
	{
		case 1: Dio_vidSetPinDir(LED_8ID_1 , DIO_u8OUTPUT); break;
    2464:	89 e0       	ldi	r24, 0x09	; 9
    2466:	61 e0       	ldi	r22, 0x01	; 1
    2468:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
    246c:	22 c0       	rjmp	.+68     	; 0x24b2 <Led_vidInit+0xc4>
		case 2: Dio_vidSetPinDir(LED_8ID_2 , DIO_u8OUTPUT); break;
    246e:	81 e1       	ldi	r24, 0x11	; 17
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
    2476:	1d c0       	rjmp	.+58     	; 0x24b2 <Led_vidInit+0xc4>
		case 3: Dio_vidSetPinDir(LED_8ID_3 , DIO_u8OUTPUT); break;
    2478:	82 e1       	ldi	r24, 0x12	; 18
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
    2480:	18 c0       	rjmp	.+48     	; 0x24b2 <Led_vidInit+0xc4>
		case 4: Dio_vidSetPinDir(LED_8ID_4 , DIO_u8OUTPUT); break;
    2482:	83 e1       	ldi	r24, 0x13	; 19
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
    248a:	13 c0       	rjmp	.+38     	; 0x24b2 <Led_vidInit+0xc4>
		case 5: Dio_vidSetPinDir(LED_8ID_5 , DIO_u8OUTPUT); break;
    248c:	84 e1       	ldi	r24, 0x14	; 20
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
    2494:	0e c0       	rjmp	.+28     	; 0x24b2 <Led_vidInit+0xc4>
		case 6: Dio_vidSetPinDir(LED_8ID_6 , DIO_u8OUTPUT); break;
    2496:	85 e1       	ldi	r24, 0x15	; 21
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <Led_vidInit+0xc4>
		case 7: Dio_vidSetPinDir(LED_8ID_7 , DIO_u8OUTPUT); break;
    24a0:	86 e1       	ldi	r24, 0x16	; 22
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <Led_vidInit+0xc4>
		case 8: Dio_vidSetPinDir(LED_8ID_8 , DIO_u8OUTPUT); break;
    24aa:	87 e1       	ldi	r24, 0x17	; 23
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>
	}

}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <Led_vidTurnOn>:

void Led_vidTurnOn(u8 LedId)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <Led_vidTurnOn+0x6>
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	3b 83       	std	Y+3, r19	; 0x03
    24d4:	2a 83       	std	Y+2, r18	; 0x02
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	84 30       	cpi	r24, 0x04	; 4
    24dc:	91 05       	cpc	r25, r1
    24de:	c9 f1       	breq	.+114    	; 0x2552 <Led_vidTurnOn+0x94>
    24e0:	2a 81       	ldd	r18, Y+2	; 0x02
    24e2:	3b 81       	ldd	r19, Y+3	; 0x03
    24e4:	25 30       	cpi	r18, 0x05	; 5
    24e6:	31 05       	cpc	r19, r1
    24e8:	84 f4       	brge	.+32     	; 0x250a <Led_vidTurnOn+0x4c>
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	9b 81       	ldd	r25, Y+3	; 0x03
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	91 05       	cpc	r25, r1
    24f2:	29 f1       	breq	.+74     	; 0x253e <Led_vidTurnOn+0x80>
    24f4:	2a 81       	ldd	r18, Y+2	; 0x02
    24f6:	3b 81       	ldd	r19, Y+3	; 0x03
    24f8:	23 30       	cpi	r18, 0x03	; 3
    24fa:	31 05       	cpc	r19, r1
    24fc:	2c f5       	brge	.+74     	; 0x2548 <Led_vidTurnOn+0x8a>
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	9b 81       	ldd	r25, Y+3	; 0x03
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	91 05       	cpc	r25, r1
    2506:	b1 f0       	breq	.+44     	; 0x2534 <Led_vidTurnOn+0x76>
    2508:	3c c0       	rjmp	.+120    	; 0x2582 <Led_vidTurnOn+0xc4>
    250a:	2a 81       	ldd	r18, Y+2	; 0x02
    250c:	3b 81       	ldd	r19, Y+3	; 0x03
    250e:	26 30       	cpi	r18, 0x06	; 6
    2510:	31 05       	cpc	r19, r1
    2512:	49 f1       	breq	.+82     	; 0x2566 <Led_vidTurnOn+0xa8>
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	86 30       	cpi	r24, 0x06	; 6
    251a:	91 05       	cpc	r25, r1
    251c:	fc f0       	brlt	.+62     	; 0x255c <Led_vidTurnOn+0x9e>
    251e:	2a 81       	ldd	r18, Y+2	; 0x02
    2520:	3b 81       	ldd	r19, Y+3	; 0x03
    2522:	27 30       	cpi	r18, 0x07	; 7
    2524:	31 05       	cpc	r19, r1
    2526:	21 f1       	breq	.+72     	; 0x2570 <Led_vidTurnOn+0xb2>
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	88 30       	cpi	r24, 0x08	; 8
    252e:	91 05       	cpc	r25, r1
    2530:	21 f1       	breq	.+72     	; 0x257a <Led_vidTurnOn+0xbc>
    2532:	27 c0       	rjmp	.+78     	; 0x2582 <Led_vidTurnOn+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8HIGH); break;
    2534:	89 e0       	ldi	r24, 0x09	; 9
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    253c:	22 c0       	rjmp	.+68     	; 0x2582 <Led_vidTurnOn+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8HIGH); break;
    253e:	81 e1       	ldi	r24, 0x11	; 17
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2546:	1d c0       	rjmp	.+58     	; 0x2582 <Led_vidTurnOn+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8HIGH); break;
    2548:	82 e1       	ldi	r24, 0x12	; 18
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2550:	18 c0       	rjmp	.+48     	; 0x2582 <Led_vidTurnOn+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8HIGH); break;
    2552:	83 e1       	ldi	r24, 0x13	; 19
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    255a:	13 c0       	rjmp	.+38     	; 0x2582 <Led_vidTurnOn+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8HIGH); break;
    255c:	84 e1       	ldi	r24, 0x14	; 20
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2564:	0e c0       	rjmp	.+28     	; 0x2582 <Led_vidTurnOn+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8HIGH); break;
    2566:	85 e1       	ldi	r24, 0x15	; 21
    2568:	61 e0       	ldi	r22, 0x01	; 1
    256a:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    256e:	09 c0       	rjmp	.+18     	; 0x2582 <Led_vidTurnOn+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8HIGH); break;
    2570:	86 e1       	ldi	r24, 0x16	; 22
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2578:	04 c0       	rjmp	.+8      	; 0x2582 <Led_vidTurnOn+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8HIGH); break;
    257a:	87 e1       	ldi	r24, 0x17	; 23
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	}
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <Led_vidTurnOff>:

void Led_vidTurnOff(u8 LedId)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <Led_vidTurnOff+0x6>
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	3b 83       	std	Y+3, r19	; 0x03
    25a4:	2a 83       	std	Y+2, r18	; 0x02
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	84 30       	cpi	r24, 0x04	; 4
    25ac:	91 05       	cpc	r25, r1
    25ae:	c9 f1       	breq	.+114    	; 0x2622 <Led_vidTurnOff+0x94>
    25b0:	2a 81       	ldd	r18, Y+2	; 0x02
    25b2:	3b 81       	ldd	r19, Y+3	; 0x03
    25b4:	25 30       	cpi	r18, 0x05	; 5
    25b6:	31 05       	cpc	r19, r1
    25b8:	84 f4       	brge	.+32     	; 0x25da <Led_vidTurnOff+0x4c>
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	82 30       	cpi	r24, 0x02	; 2
    25c0:	91 05       	cpc	r25, r1
    25c2:	29 f1       	breq	.+74     	; 0x260e <Led_vidTurnOff+0x80>
    25c4:	2a 81       	ldd	r18, Y+2	; 0x02
    25c6:	3b 81       	ldd	r19, Y+3	; 0x03
    25c8:	23 30       	cpi	r18, 0x03	; 3
    25ca:	31 05       	cpc	r19, r1
    25cc:	2c f5       	brge	.+74     	; 0x2618 <Led_vidTurnOff+0x8a>
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	91 05       	cpc	r25, r1
    25d6:	b1 f0       	breq	.+44     	; 0x2604 <Led_vidTurnOff+0x76>
    25d8:	3c c0       	rjmp	.+120    	; 0x2652 <Led_vidTurnOff+0xc4>
    25da:	2a 81       	ldd	r18, Y+2	; 0x02
    25dc:	3b 81       	ldd	r19, Y+3	; 0x03
    25de:	26 30       	cpi	r18, 0x06	; 6
    25e0:	31 05       	cpc	r19, r1
    25e2:	49 f1       	breq	.+82     	; 0x2636 <Led_vidTurnOff+0xa8>
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	9b 81       	ldd	r25, Y+3	; 0x03
    25e8:	86 30       	cpi	r24, 0x06	; 6
    25ea:	91 05       	cpc	r25, r1
    25ec:	fc f0       	brlt	.+62     	; 0x262c <Led_vidTurnOff+0x9e>
    25ee:	2a 81       	ldd	r18, Y+2	; 0x02
    25f0:	3b 81       	ldd	r19, Y+3	; 0x03
    25f2:	27 30       	cpi	r18, 0x07	; 7
    25f4:	31 05       	cpc	r19, r1
    25f6:	21 f1       	breq	.+72     	; 0x2640 <Led_vidTurnOff+0xb2>
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	9b 81       	ldd	r25, Y+3	; 0x03
    25fc:	88 30       	cpi	r24, 0x08	; 8
    25fe:	91 05       	cpc	r25, r1
    2600:	21 f1       	breq	.+72     	; 0x264a <Led_vidTurnOff+0xbc>
    2602:	27 c0       	rjmp	.+78     	; 0x2652 <Led_vidTurnOff+0xc4>
	{
		case 1: Dio_vidSetPinVal(LED_8ID_1 , DIO_u8LOW); break;
    2604:	89 e0       	ldi	r24, 0x09	; 9
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    260c:	22 c0       	rjmp	.+68     	; 0x2652 <Led_vidTurnOff+0xc4>
		case 2: Dio_vidSetPinVal(LED_8ID_2 , DIO_u8LOW); break;
    260e:	81 e1       	ldi	r24, 0x11	; 17
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2616:	1d c0       	rjmp	.+58     	; 0x2652 <Led_vidTurnOff+0xc4>
		case 3: Dio_vidSetPinVal(LED_8ID_3 , DIO_u8LOW); break;
    2618:	82 e1       	ldi	r24, 0x12	; 18
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2620:	18 c0       	rjmp	.+48     	; 0x2652 <Led_vidTurnOff+0xc4>
		case 4: Dio_vidSetPinVal(LED_8ID_4 , DIO_u8LOW); break;
    2622:	83 e1       	ldi	r24, 0x13	; 19
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    262a:	13 c0       	rjmp	.+38     	; 0x2652 <Led_vidTurnOff+0xc4>
		case 5: Dio_vidSetPinVal(LED_8ID_5 , DIO_u8LOW); break;
    262c:	84 e1       	ldi	r24, 0x14	; 20
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2634:	0e c0       	rjmp	.+28     	; 0x2652 <Led_vidTurnOff+0xc4>
		case 6: Dio_vidSetPinVal(LED_8ID_6 , DIO_u8LOW); break;
    2636:	85 e1       	ldi	r24, 0x15	; 21
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    263e:	09 c0       	rjmp	.+18     	; 0x2652 <Led_vidTurnOff+0xc4>
		case 7: Dio_vidSetPinVal(LED_8ID_7 , DIO_u8LOW); break;
    2640:	86 e1       	ldi	r24, 0x16	; 22
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
    2648:	04 c0       	rjmp	.+8      	; 0x2652 <Led_vidTurnOff+0xc4>
		case 8: Dio_vidSetPinVal(LED_8ID_8 , DIO_u8LOW); break;
    264a:	87 e1       	ldi	r24, 0x17	; 23
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	0e 94 08 08 	call	0x1010	; 0x1010 <Dio_vidSetPinVal>
	}
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <Servo_vidInit>:
#include "Dio_int.h"
#include "Servo_cfg.h"
#include "Servo_int.h"

void Servo_vidInit(void)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(TIMER_1_PIN, DIO_u8OUTPUT);
    2666:	8d e1       	ldi	r24, 0x1D	; 29
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Dio_vidSetPinDir>

	/* Initialize Timer */
	Timer1_vidInit();
    266e:	0e 94 9b 13 	call	0x2736	; 0x2736 <Timer1_vidInit>

	/* Set Value In ICR Register To Make Freq = 20HZ  */
	Timer1_vidSetICR1Val(20000);
    2672:	80 e2       	ldi	r24, 0x20	; 32
    2674:	9e e4       	ldi	r25, 0x4E	; 78
    2676:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <Timer1_vidSetICR1Val>

}
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <Servo_vidSetDegree>:

void Servo_vidSetDegree(u8 degree)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	27 97       	sbiw	r28, 0x07	; 7
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	8f 83       	std	Y+7, r24	; 0x07
	f32 time_of_degree;
	u16 val_of_register;

	/* Convert Degree To TIME And Counts */
	time_of_degree = ((degree * TIME_OF_FULL_DEGREE)/FULL_DEGREE)+INITIAL_TIME;
    2696:	8f 81       	ldd	r24, Y+7	; 0x07
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	aa 27       	eor	r26, r26
    269e:	97 fd       	sbrc	r25, 7
    26a0:	a0 95       	com	r26
    26a2:	ba 2f       	mov	r27, r26
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	26 e6       	ldi	r18, 0x66	; 102
    26b6:	36 e6       	ldi	r19, 0x66	; 102
    26b8:	46 e0       	ldi	r20, 0x06	; 6
    26ba:	50 e4       	ldi	r21, 0x40	; 64
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	44 e3       	ldi	r20, 0x34	; 52
    26ce:	53 e4       	ldi	r21, 0x43	; 67
    26d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	2d ec       	ldi	r18, 0xCD	; 205
    26de:	3c ec       	ldi	r19, 0xCC	; 204
    26e0:	4c ec       	ldi	r20, 0xCC	; 204
    26e2:	5e e3       	ldi	r21, 0x3E	; 62
    26e4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	ad 83       	std	Y+5, r26	; 0x05
    26f2:	be 83       	std	Y+6, r27	; 0x06
	val_of_register = (u16)(time_of_degree *1000) ;
    26f4:	6b 81       	ldd	r22, Y+3	; 0x03
    26f6:	7c 81       	ldd	r23, Y+4	; 0x04
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a e7       	ldi	r20, 0x7A	; 122
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9a 83       	std	Y+2, r25	; 0x02
    271a:	89 83       	std	Y+1, r24	; 0x01

	/* Set Compare Register Value */
	Timer1_vidSetOCR1AVal(val_of_register);
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	0e 94 0c 14 	call	0x2818	; 0x2818 <Timer1_vidSetOCR1AVal>
}
    2724:	27 96       	adiw	r28, 0x07	; 7
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <Timer1_vidInit>:
void(*Pfun_CMPB)(void);
void(*Pfun_CAPT)(void);


void Timer1_vidInit(void)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B.Bits.WGM12 = 1;
	TCCR1B.Bits.WGM13 = 0;

#elif TIMER1_u8WFG_MODE == TIMER1_u8FAST_PWM_MODE_TOP_ICR1
	//Select Fast PWM Mode With ICR1 AS TOP Register
	TCCR1A.Bits.WGM10 = 0;
    273e:	ef e4       	ldi	r30, 0x4F	; 79
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	8e 7f       	andi	r24, 0xFE	; 254
    2746:	80 83       	st	Z, r24
	TCCR1A.Bits.WGM11 = 1;
    2748:	ef e4       	ldi	r30, 0x4F	; 79
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	82 60       	ori	r24, 0x02	; 2
    2750:	80 83       	st	Z, r24
	TCCR1B.Bits.WGM12 = 1;
    2752:	ee e4       	ldi	r30, 0x4E	; 78
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	88 60       	ori	r24, 0x08	; 8
    275a:	80 83       	st	Z, r24
	TCCR1B.Bits.WGM13 = 1;
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	80 61       	ori	r24, 0x10	; 16
    2764:	80 83       	st	Z, r24
	#elif TIMER1_u8COMPARE_MATCH_OUTPUT_MODE == TIMER1_u8PWM_TOGGLE_OC1_ON_CM
		//Toggle OC1A on Compare Match, OC1B disconnected
		TCCR1A.Bits.COM1A = 1;
	#elif TIMER1_u8COMPARE_MATCH_OUTPUT_MODE == TIMER1_u8PWMCLEAR_OC1_ON_CM_SET_ON_TOP
		//Clear OC1 on compare match, set OC1 at TOP
		TCCR1A.Bits.COM1A = 2;
    2766:	ef e4       	ldi	r30, 0x4F	; 79
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8f 73       	andi	r24, 0x3F	; 63
    276e:	80 68       	ori	r24, 0x80	; 128
    2770:	80 83       	st	Z, r24
#if TIMER1_u8PRESCALLER_VALU == TIMER1_u8FCPU_1
	//Select No Pre_scalling
	TCCR1B.Bits.CS = 1;
#elif TIMER1_u8PRESCALLER_VALU == TIMER1_u8FCPU_8
	//Select Pre_scaller with 8
	TCCR1B.Bits.CS = 2;
    2772:	ee e4       	ldi	r30, 0x4E	; 78
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 7f       	andi	r24, 0xF8	; 248
    277a:	82 60       	ori	r24, 0x02	; 2
    277c:	80 83       	st	Z, r24
	//PIE of TIMER1 at overflow of counter register
	SREG.Bits.I_bit  =  1;
	TIMSK.Bits.TOIE1 =  1;
#elif TIMER1_u8OVF_INTERRUPT_CFG == TIMER1_u8OVF_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 at overflow of counter register
	TIMSK.Bits.TOIE1 =  0;
    277e:	e9 e5       	ldi	r30, 0x59	; 89
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	8b 7f       	andi	r24, 0xFB	; 251
    2786:	80 83       	st	Z, r24
	//PIE of TIMER1 at Compare Match Output Register for Channel_A (OCR1A)
	SREG.Bits.I_bit   =  1;
	TIMSK.Bits.OCIE1A =  1;
#elif TIMER1_u8CMP_A_INTERRUPT_CFG == TIMER1_u8CMP_A_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 at Compare Match Output Register for Channel_A (OCR1A)
	TIMSK.Bits.OCIE1A =  0;
    2788:	e9 e5       	ldi	r30, 0x59	; 89
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	8f 7e       	andi	r24, 0xEF	; 239
    2790:	80 83       	st	Z, r24
	//PIE of TIMER1 at Compare Match Output Register for Channel_B (OCR1B)
	SREG.Bits.I_bit   =  1;
	TIMSK.Bits.OCIE1B =  1;
#elif TIMER1_u8CMP_A_INTERRUPT_CFG == TIMER1_u8CMP_A_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 at Compare Match Output Register for Channel_B (OCR1B)
	TIMSK.Bits.OCIE1B =  0;
    2792:	e9 e5       	ldi	r30, 0x59	; 89
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	87 7f       	andi	r24, 0xF7	; 247
    279a:	80 83       	st	Z, r24
	//PIE of TIMER1 Input Capture
	SREG.Bits.I_bit   =  1;
	TIMSK.Bits.TICIE1 =  1;
#elif TIMER1_u8INPUT_CAPTUER_INTERRUPT_CFG == TIMER1_u8INPUT_CAPTUER_INTERRUPT_DISABLE
	//disable Interrupt TIMER1 Input Capture
	TIMSK.Bits.TICIE1 =  0;
    279c:	e9 e5       	ldi	r30, 0x59	; 89
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	8f 7d       	andi	r24, 0xDF	; 223
    27a4:	80 83       	st	Z, r24
#endif
}
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <Timer1_vidSetTCNT1Val>:

void Timer1_vidSetTCNT1Val(u16 Val)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <Timer1_vidSetTCNT1Val+0x6>
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Counter Register (TCNT1)
	TCNT1.Byte = Val;
    27ba:	ec e4       	ldi	r30, 0x4C	; 76
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
}
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <Timer1_vidSetICR1Val>:

void Timer1_vidSetICR1Val(u16 Val)
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <Timer1_vidSetICR1Val+0x6>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
	//Set Value In Input Capture Register (ICR1)
	ICR1.Byte = Val;
    27de:	e6 e4       	ldi	r30, 0x46	; 70
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
}
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <Timer1_u16GetICR1Val>:

u16 Timer1_u16GetICR1Val(void)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <Timer1_u16GetICR1Val+0x6>
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
	//Read Value From Input Capture Register (ICR1)
	u16 Ret_Val;
	Ret_Val = ICR1.Byte;
    27fe:	e6 e4       	ldi	r30, 0x46	; 70
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	9a 83       	std	Y+2, r25	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
	return Ret_Val;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <Timer1_vidSetOCR1AVal>:

void Timer1_vidSetOCR1AVal(u16 Val)
{
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	00 d0       	rcall	.+0      	; 0x281e <Timer1_vidSetOCR1AVal+0x6>
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	9a 83       	std	Y+2, r25	; 0x02
    2824:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Output Compare Register Channel_A (OCR1A)
	OCR1A.Byte = Val;
    2826:	ea e4       	ldi	r30, 0x4A	; 74
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
}
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <Timer1_vidSetOCR1BVal>:

void Timer1_vidSetOCR1BVal(u16 Val)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <Timer1_vidSetOCR1BVal+0x6>
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
	//Set Value Output Compare Register Channel_B (OCR1B)
	OCR1B.Byte = Val;
    284a:	e8 e4       	ldi	r30, 0x48	; 72
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <Timer1_vidInputCapRisingEdge>:

void Timer1_vidInputCapRisingEdge(void)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	//Select Input Capture At Rising Edge
	TCCR1B.Bits.ICES1 = 1;
    2868:	ee e4       	ldi	r30, 0x4E	; 78
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	80 64       	ori	r24, 0x40	; 64
    2870:	80 83       	st	Z, r24
}
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <Timer1_vidInputCapFallingEdge>:

void Timer1_vidInputCapFallingEdge(void)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
	//Select Input Capture At Falling Edge
	TCCR1B.Bits.ICES1 = 0;
    2880:	ee e4       	ldi	r30, 0x4E	; 78
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8f 7b       	andi	r24, 0xBF	; 191
    2888:	80 83       	st	Z, r24
}
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <Timer1_vidStopTimer>:

void Timer1_vidStopTimer(void)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
	//Stop Timer1
	TCCR1B.Bits.CS = 0;
    2898:	ee e4       	ldi	r30, 0x4E	; 78
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 7f       	andi	r24, 0xF8	; 248
    28a0:	80 83       	st	Z, r24
}
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <Timer1_vidSetCallBackOVF>:

void Timer1_vidSetCallBackOVF(void(*pf)(void))
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <Timer1_vidSetCallBackOVF+0x6>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
	Pfun_OVF = pf;
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ba:	90 93 cb 01 	sts	0x01CB, r25
    28be:	80 93 ca 01 	sts	0x01CA, r24
}
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <Timer1_vidSetCallBackCMP_A>:

void Timer1_vidSetCallBackCMP_A(void(*pf)(void))
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <Timer1_vidSetCallBackCMP_A+0x6>
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMPA = pf;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	90 93 cd 01 	sts	0x01CD, r25
    28e2:	80 93 cc 01 	sts	0x01CC, r24
}
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <Timer1_vidSetCallBackCMP_B>:

void Timer1_vidSetCallBackCMP_B(void(*pf)(void))
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <Timer1_vidSetCallBackCMP_B+0x6>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMPB = pf;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	90 93 c9 01 	sts	0x01C9, r25
    2906:	80 93 c8 01 	sts	0x01C8, r24
}
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <Timer1_vidSetCallBackInputCAP>:

void Timer1_vidSetCallBackInputCAP(void(*pf)(void))
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	00 d0       	rcall	.+0      	; 0x291a <Timer1_vidSetCallBackInputCAP+0x6>
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CAPT = pf;
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	90 93 c7 01 	sts	0x01C7, r25
    292a:	80 93 c6 01 	sts	0x01C6, r24
}
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <__vector_9>:

void __vector_9 (void)
{
    2938:	1f 92       	push	r1
    293a:	0f 92       	push	r0
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	0f 92       	push	r0
    2940:	11 24       	eor	r1, r1
    2942:	2f 93       	push	r18
    2944:	3f 93       	push	r19
    2946:	4f 93       	push	r20
    2948:	5f 93       	push	r21
    294a:	6f 93       	push	r22
    294c:	7f 93       	push	r23
    294e:	8f 93       	push	r24
    2950:	9f 93       	push	r25
    2952:	af 93       	push	r26
    2954:	bf 93       	push	r27
    2956:	ef 93       	push	r30
    2958:	ff 93       	push	r31
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
	Pfun_OVF();
    2962:	e0 91 ca 01 	lds	r30, 0x01CA
    2966:	f0 91 cb 01 	lds	r31, 0x01CB
    296a:	09 95       	icall
}
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	ff 91       	pop	r31
    2972:	ef 91       	pop	r30
    2974:	bf 91       	pop	r27
    2976:	af 91       	pop	r26
    2978:	9f 91       	pop	r25
    297a:	8f 91       	pop	r24
    297c:	7f 91       	pop	r23
    297e:	6f 91       	pop	r22
    2980:	5f 91       	pop	r21
    2982:	4f 91       	pop	r20
    2984:	3f 91       	pop	r19
    2986:	2f 91       	pop	r18
    2988:	0f 90       	pop	r0
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	0f 90       	pop	r0
    298e:	1f 90       	pop	r1
    2990:	18 95       	reti

00002992 <__vector_8>:

void __vector_8 (void)
{
    2992:	1f 92       	push	r1
    2994:	0f 92       	push	r0
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	0f 92       	push	r0
    299a:	11 24       	eor	r1, r1
    299c:	2f 93       	push	r18
    299e:	3f 93       	push	r19
    29a0:	4f 93       	push	r20
    29a2:	5f 93       	push	r21
    29a4:	6f 93       	push	r22
    29a6:	7f 93       	push	r23
    29a8:	8f 93       	push	r24
    29aa:	9f 93       	push	r25
    29ac:	af 93       	push	r26
    29ae:	bf 93       	push	r27
    29b0:	ef 93       	push	r30
    29b2:	ff 93       	push	r31
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMPB();
    29bc:	e0 91 c8 01 	lds	r30, 0x01C8
    29c0:	f0 91 c9 01 	lds	r31, 0x01C9
    29c4:	09 95       	icall
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	ff 91       	pop	r31
    29cc:	ef 91       	pop	r30
    29ce:	bf 91       	pop	r27
    29d0:	af 91       	pop	r26
    29d2:	9f 91       	pop	r25
    29d4:	8f 91       	pop	r24
    29d6:	7f 91       	pop	r23
    29d8:	6f 91       	pop	r22
    29da:	5f 91       	pop	r21
    29dc:	4f 91       	pop	r20
    29de:	3f 91       	pop	r19
    29e0:	2f 91       	pop	r18
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	0f 90       	pop	r0
    29e8:	1f 90       	pop	r1
    29ea:	18 95       	reti

000029ec <__vector_7>:

void __vector_7 (void)
{
    29ec:	1f 92       	push	r1
    29ee:	0f 92       	push	r0
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	0f 92       	push	r0
    29f4:	11 24       	eor	r1, r1
    29f6:	2f 93       	push	r18
    29f8:	3f 93       	push	r19
    29fa:	4f 93       	push	r20
    29fc:	5f 93       	push	r21
    29fe:	6f 93       	push	r22
    2a00:	7f 93       	push	r23
    2a02:	8f 93       	push	r24
    2a04:	9f 93       	push	r25
    2a06:	af 93       	push	r26
    2a08:	bf 93       	push	r27
    2a0a:	ef 93       	push	r30
    2a0c:	ff 93       	push	r31
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMPA();
    2a16:	e0 91 cc 01 	lds	r30, 0x01CC
    2a1a:	f0 91 cd 01 	lds	r31, 0x01CD
    2a1e:	09 95       	icall
}
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	ff 91       	pop	r31
    2a26:	ef 91       	pop	r30
    2a28:	bf 91       	pop	r27
    2a2a:	af 91       	pop	r26
    2a2c:	9f 91       	pop	r25
    2a2e:	8f 91       	pop	r24
    2a30:	7f 91       	pop	r23
    2a32:	6f 91       	pop	r22
    2a34:	5f 91       	pop	r21
    2a36:	4f 91       	pop	r20
    2a38:	3f 91       	pop	r19
    2a3a:	2f 91       	pop	r18
    2a3c:	0f 90       	pop	r0
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	0f 90       	pop	r0
    2a42:	1f 90       	pop	r1
    2a44:	18 95       	reti

00002a46 <__vector_6>:

void __vector_6 (void)
{
    2a46:	1f 92       	push	r1
    2a48:	0f 92       	push	r0
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	0f 92       	push	r0
    2a4e:	11 24       	eor	r1, r1
    2a50:	2f 93       	push	r18
    2a52:	3f 93       	push	r19
    2a54:	4f 93       	push	r20
    2a56:	5f 93       	push	r21
    2a58:	6f 93       	push	r22
    2a5a:	7f 93       	push	r23
    2a5c:	8f 93       	push	r24
    2a5e:	9f 93       	push	r25
    2a60:	af 93       	push	r26
    2a62:	bf 93       	push	r27
    2a64:	ef 93       	push	r30
    2a66:	ff 93       	push	r31
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
	Pfun_CAPT();
    2a70:	e0 91 c6 01 	lds	r30, 0x01C6
    2a74:	f0 91 c7 01 	lds	r31, 0x01C7
    2a78:	09 95       	icall
}
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	ff 91       	pop	r31
    2a80:	ef 91       	pop	r30
    2a82:	bf 91       	pop	r27
    2a84:	af 91       	pop	r26
    2a86:	9f 91       	pop	r25
    2a88:	8f 91       	pop	r24
    2a8a:	7f 91       	pop	r23
    2a8c:	6f 91       	pop	r22
    2a8e:	5f 91       	pop	r21
    2a90:	4f 91       	pop	r20
    2a92:	3f 91       	pop	r19
    2a94:	2f 91       	pop	r18
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	0f 90       	pop	r0
    2a9c:	1f 90       	pop	r1
    2a9e:	18 95       	reti

00002aa0 <main>:
#include "Lcd_int.h"

#define BLOCK_STATUS_LOCATION    11      //Location Which Saved The Value Block Status Flag in EEPROM

int main(void)
{
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	cf 54       	subi	r28, 0x4F	; 79
    2aae:	d0 40       	sbci	r29, 0x00	; 0
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
	/* Declare Variable To Save Value From KeyPad                        */
	u8 App_u8Key             = 0 ;
    2aba:	fe 01       	movw	r30, r28
    2abc:	e3 5b       	subi	r30, 0xB3	; 179
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	10 82       	st	Z, r1

	/* Declare Variable To Save Value Of Block Status Flag From EEPROM   */
	u8 App_u8BlockStatusFlag = 0;
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e2 5b       	subi	r30, 0xB2	; 178
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	10 82       	st	Z, r1

	/*  Declare Variable To Save Data Which Read From EEPROM             */
	u8 App_u8ReadData        = 0;
    2aca:	fe 01       	movw	r30, r28
    2acc:	e1 5b       	subi	r30, 0xB1	; 177
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	10 82       	st	Z, r1

	/*  Declare Variable To Save EEPROM Location                         */
	u8 App_u8EepromLocation  = 0;
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e4 5b       	subi	r30, 0xB4	; 180
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	10 82       	st	Z, r1

	/* Declare Variable To Indicate Enter Password Mode                  */
	u8 App_u8EnterPassFlag   = 1;
    2ada:	fe 01       	movw	r30, r28
    2adc:	e5 5b       	subi	r30, 0xB5	; 181
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	80 83       	st	Z, r24

	/* Declare Variable To Indicate Password Compared With EEPROM        */
	u8 App_ErrorData         = 0;
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e6 5b       	subi	r30, 0xB6	; 182
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	10 82       	st	Z, r1

	/* Declare Variable To Count Number Of Tried To Enter Error Password */
	u8 App_u8ErrorPassCounter = 0;
    2aec:	fe 01       	movw	r30, r28
    2aee:	e7 5b       	subi	r30, 0xB7	; 183
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	10 82       	st	Z, r1

	/* Declare Variable To Indicate Start Your System                    */
	u8 App_u8SystemFlag      = 0;
    2af4:	fe 01       	movw	r30, r28
    2af6:	e8 5b       	subi	r30, 0xB8	; 184
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	10 82       	st	Z, r1

	/* Declare Variable To Indicate Start Your System                    */
	u8 App_u8StartSystem     = 0;
    2afc:	fe 01       	movw	r30, r28
    2afe:	e9 5b       	subi	r30, 0xB9	; 185
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	10 82       	st	Z, r1


	/* Initialize KeyPad       */
	Keypad_vidInit();
    2b04:	0e 94 06 0c 	call	0x180c	; 0x180c <Keypad_vidInit>

	/* Initialize Buzzer       */
	Buzzer_vidInit();
    2b08:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Buzzer_vidInit>

	/* Initialize EEPROM       */
	Eeprom_vidInit();
    2b0c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <Eeprom_vidInit>

	/* Initialize Servo_Motor  */
	Servo_vidInit();
    2b10:	0e 94 2f 13 	call	0x265e	; 0x265e <Servo_vidInit>

	/* Initialize LCD          */
	Lcd_vidInit();
    2b14:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <Lcd_vidInit>

	/* Initialize LED          */
	Led_vidInit( LED_1 );
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <Led_vidInit>

	while(1)
	{

		/* Read Block Status Flag From EEPROM   */
		Eeprom_u8ReadByte( Device_0 , BLOCK_STATUS_LOCATION , &App_u8BlockStatusFlag);
    2b1e:	9e 01       	movw	r18, r28
    2b20:	22 5b       	subi	r18, 0xB2	; 178
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	6b e0       	ldi	r22, 0x0B	; 11
    2b28:	70 e0       	ldi	r23, 0x00	; 0
    2b2a:	a9 01       	movw	r20, r18
    2b2c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Eeprom_u8ReadByte>
    2b30:	fe 01       	movw	r30, r28
    2b32:	ed 5b       	subi	r30, 0xBD	; 189
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 e2       	ldi	r26, 0x20	; 32
    2b3c:	b1 e4       	ldi	r27, 0x41	; 65
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	a2 83       	std	Z+2, r26	; 0x02
    2b44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	8e 01       	movw	r16, r28
    2b48:	01 5c       	subi	r16, 0xC1	; 193
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ed 5b       	subi	r30, 0xBD	; 189
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	a2 83       	std	Z+2, r26	; 0x02
    2b72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b74:	fe 01       	movw	r30, r28
    2b76:	ff 96       	adiw	r30, 0x3f	; 63
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <main+0xfa>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9e af       	std	Y+62, r25	; 0x3e
    2b96:	8d af       	std	Y+61, r24	; 0x3d
    2b98:	46 c0       	rjmp	.+140    	; 0x2c26 <main+0x186>
	else if (__tmp > 65535)
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ff 96       	adiw	r30, 0x3f	; 63
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	64 f5       	brge	.+88     	; 0x2c0e <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ed 5b       	subi	r30, 0xBD	; 189
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9e af       	std	Y+62, r25	; 0x3e
    2be2:	8d af       	std	Y+61, r24	; 0x3d
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <main+0x164>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9c af       	std	Y+60, r25	; 0x3c
    2bec:	8b af       	std	Y+59, r24	; 0x3b
    2bee:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bf0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <main+0x152>
    2bf6:	9c af       	std	Y+60, r25	; 0x3c
    2bf8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9e af       	std	Y+62, r25	; 0x3e
    2c02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <main+0x146>
    2c0c:	d1 c2       	rjmp	.+1442   	; 0x31b0 <main+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ff 96       	adiw	r30, 0x3f	; 63
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9e af       	std	Y+62, r25	; 0x3e
    2c24:	8d af       	std	Y+61, r24	; 0x3d
    2c26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2a:	9a af       	std	Y+58, r25	; 0x3a
    2c2c:	89 af       	std	Y+57, r24	; 0x39
    2c2e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c30:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <main+0x192>
    2c36:	9a af       	std	Y+58, r25	; 0x3a
    2c38:	89 af       	std	Y+57, r24	; 0x39
    2c3a:	ba c2       	rjmp	.+1396   	; 0x31b0 <main+0x710>

		/* All Time Ask About Block Status Flag And Make It As Condition To Complete System */
		while( App_u8BlockStatusFlag != 1 )
		{
			/* Get Key From KeyPad  */
			App_u8Key = Keypad_u8GetKey();
    2c3c:	0e 94 4d 0c 	call	0x189a	; 0x189a <Keypad_u8GetKey>
    2c40:	fe 01       	movw	r30, r28
    2c42:	e3 5b       	subi	r30, 0xB3	; 179
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 83       	st	Z, r24


			if( App_u8StartSystem == 0 )
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e9 5b       	subi	r30, 0xB9	; 185
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	88 23       	and	r24, r24
    2c52:	19 f5       	brne	.+70     	; 0x2c9a <main+0x1fa>
			{
				Lcd_vidSendCommand(0x80);
    2c54:	80 e8       	ldi	r24, 0x80	; 128
    2c56:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
				Lcd_vidWriteStr( "Welcome To Home" );
    2c5a:	80 e6       	ldi	r24, 0x60	; 96
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 ce 11 	call	0x239c	; 0x239c <Lcd_vidWriteStr>

				Lcd_vidSendCommand(0xc0);
    2c62:	80 ec       	ldi	r24, 0xC0	; 192
    2c64:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>

				if( App_u8ErrorPassCounter == 0 )
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e7 5b       	subi	r30, 0xB7	; 183
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	88 23       	and	r24, r24
    2c72:	29 f4       	brne	.+10     	; 0x2c7e <main+0x1de>
				{
					Lcd_vidWriteStr( "Password : " );
    2c74:	80 e7       	ldi	r24, 0x70	; 112
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 ce 11 	call	0x239c	; 0x239c <Lcd_vidWriteStr>
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <main+0x1e6>
				}
				else
				{
					Lcd_vidWriteStr( "Try Again : " );
    2c7e:	8c e7       	ldi	r24, 0x7C	; 124
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 ce 11 	call	0x239c	; 0x239c <Lcd_vidWriteStr>
				}

				App_u8EnterPassFlag = 1;
    2c86:	fe 01       	movw	r30, r28
    2c88:	e5 5b       	subi	r30, 0xB5	; 181
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	80 83       	st	Z, r24
				App_u8StartSystem   = 1;
    2c90:	fe 01       	movw	r30, r28
    2c92:	e9 5b       	subi	r30, 0xB9	; 185
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	80 83       	st	Z, r24
			}

			/* Check Password Flag To Start Receive Password From KeyPad */
			if( App_u8EnterPassFlag == 1)
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e5 5b       	subi	r30, 0xB5	; 181
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <main+0x208>
    2ca6:	f2 c1       	rjmp	.+996    	; 0x308c <main+0x5ec>
			{

				/* Start Check Values From Keypad */
				if( App_u8Key != KEYPAD_u8NO_KEY)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e3 5b       	subi	r30, 0xB3	; 179
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <main+0x216>
    2cb4:	eb c1       	rjmp	.+982    	; 0x308c <main+0x5ec>
				{
					if( (App_u8Key <= 9)  && (App_u8Key >= 0) )
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e3 5b       	subi	r30, 0xB3	; 179
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8a 30       	cpi	r24, 0x0A	; 10
    2cc0:	08 f0       	brcs	.+2      	; 0x2cc4 <main+0x224>
    2cc2:	19 c1       	rjmp	.+562    	; 0x2ef6 <main+0x456>
					{
						/* Display KeyPad Input On LCD */
						Lcd_vidWriteChar( App_u8Key + '0' );
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e3 5b       	subi	r30, 0xB3	; 179
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	80 5d       	subi	r24, 0xD0	; 208
    2cce:	0e 94 ef 10 	call	0x21de	; 0x21de <Lcd_vidWriteChar>

						/* Read Data From EEPROM */
						Eeprom_u8ReadByte( Device_0 , App_u8EepromLocation , &App_u8ReadData);
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e4 5b       	subi	r30, 0xB4	; 180
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	ae 01       	movw	r20, r28
    2ce0:	41 5b       	subi	r20, 0xB1	; 177
    2ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	b9 01       	movw	r22, r18
    2ce8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Eeprom_u8ReadByte>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 e2       	ldi	r26, 0x20	; 32
    2cf2:	b1 e4       	ldi	r27, 0x41	; 65
    2cf4:	8d ab       	std	Y+53, r24	; 0x35
    2cf6:	9e ab       	std	Y+54, r25	; 0x36
    2cf8:	af ab       	std	Y+55, r26	; 0x37
    2cfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	6d a9       	ldd	r22, Y+53	; 0x35
    2cfe:	7e a9       	ldd	r23, Y+54	; 0x36
    2d00:	8f a9       	ldd	r24, Y+55	; 0x37
    2d02:	98 ad       	ldd	r25, Y+56	; 0x38
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a ef       	ldi	r20, 0xFA	; 250
    2d0a:	54 e4       	ldi	r21, 0x44	; 68
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	89 ab       	std	Y+49, r24	; 0x31
    2d16:	9a ab       	std	Y+50, r25	; 0x32
    2d18:	ab ab       	std	Y+51, r26	; 0x33
    2d1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d20:	8b a9       	ldd	r24, Y+51	; 0x33
    2d22:	9c a9       	ldd	r25, Y+52	; 0x34
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <main+0x29e>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	98 ab       	std	Y+48, r25	; 0x30
    2d3a:	8f a7       	std	Y+47, r24	; 0x2f
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <main+0x31c>
	else if (__tmp > 65535)
    2d3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2d40:	7a a9       	ldd	r23, Y+50	; 0x32
    2d42:	8b a9       	ldd	r24, Y+51	; 0x33
    2d44:	9c a9       	ldd	r25, Y+52	; 0x34
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <main+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	6d a9       	ldd	r22, Y+53	; 0x35
    2d58:	7e a9       	ldd	r23, Y+54	; 0x36
    2d5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2d5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	51 e4       	ldi	r21, 0x41	; 65
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	98 ab       	std	Y+48, r25	; 0x30
    2d7c:	8f a7       	std	Y+47, r24	; 0x2f
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <main+0x2fe>
    2d80:	88 ec       	ldi	r24, 0xC8	; 200
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9e a7       	std	Y+46, r25	; 0x2e
    2d86:	8d a7       	std	Y+45, r24	; 0x2d
    2d88:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <main+0x2ec>
    2d90:	9e a7       	std	Y+46, r25	; 0x2e
    2d92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d96:	98 a9       	ldd	r25, Y+48	; 0x30
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	98 ab       	std	Y+48, r25	; 0x30
    2d9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da0:	98 a9       	ldd	r25, Y+48	; 0x30
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <main+0x2e0>
    2da6:	14 c0       	rjmp	.+40     	; 0x2dd0 <main+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	69 a9       	ldd	r22, Y+49	; 0x31
    2daa:	7a a9       	ldd	r23, Y+50	; 0x32
    2dac:	8b a9       	ldd	r24, Y+51	; 0x33
    2dae:	9c a9       	ldd	r25, Y+52	; 0x34
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	98 ab       	std	Y+48, r25	; 0x30
    2dba:	8f a7       	std	Y+47, r24	; 0x2f
    2dbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2dc0:	9c a7       	std	Y+44, r25	; 0x2c
    2dc2:	8b a7       	std	Y+43, r24	; 0x2b
    2dc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <main+0x328>
    2dcc:	9c a7       	std	Y+44, r25	; 0x2c
    2dce:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(10);

						/* Increment Location In EEPROM For Next Location */
						App_u8EepromLocation++;
    2dd0:	de 01       	movw	r26, r28
    2dd2:	a4 5b       	subi	r26, 0xB4	; 180
    2dd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e4 5b       	subi	r30, 0xB4	; 180
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	8c 93       	st	X, r24

						/* Compare Input Password With Saved Password In EEPROM */
						if( (App_u8Key +'0' ) != App_u8ReadData)
    2de2:	fe 01       	movw	r30, r28
    2de4:	e3 5b       	subi	r30, 0xB3	; 179
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 81       	ld	r24, Z
    2dea:	88 2f       	mov	r24, r24
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9c 01       	movw	r18, r24
    2df0:	20 5d       	subi	r18, 0xD0	; 208
    2df2:	3f 4f       	sbci	r19, 0xFF	; 255
    2df4:	fe 01       	movw	r30, r28
    2df6:	e1 5b       	subi	r30, 0xB1	; 177
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 2f       	mov	r24, r24
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	28 17       	cp	r18, r24
    2e02:	39 07       	cpc	r19, r25
    2e04:	29 f0       	breq	.+10     	; 0x2e10 <main+0x370>
						{
							/* Raise Flag That You Enter Not Valid Number */
							App_ErrorData = 1;
    2e06:	fe 01       	movw	r30, r28
    2e08:	e6 5b       	subi	r30, 0xB6	; 182
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	80 83       	st	Z, r24
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	aa ef       	ldi	r26, 0xFA	; 250
    2e16:	b3 e4       	ldi	r27, 0x43	; 67
    2e18:	8f a3       	std	Y+39, r24	; 0x27
    2e1a:	98 a7       	std	Y+40, r25	; 0x28
    2e1c:	a9 a7       	std	Y+41, r26	; 0x29
    2e1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	6f a1       	ldd	r22, Y+39	; 0x27
    2e22:	78 a5       	ldd	r23, Y+40	; 0x28
    2e24:	89 a5       	ldd	r24, Y+41	; 0x29
    2e26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a ef       	ldi	r20, 0xFA	; 250
    2e2e:	54 e4       	ldi	r21, 0x44	; 68
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	8b a3       	std	Y+35, r24	; 0x23
    2e3a:	9c a3       	std	Y+36, r25	; 0x24
    2e3c:	ad a3       	std	Y+37, r26	; 0x25
    2e3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e40:	6b a1       	ldd	r22, Y+35	; 0x23
    2e42:	7c a1       	ldd	r23, Y+36	; 0x24
    2e44:	8d a1       	ldd	r24, Y+37	; 0x25
    2e46:	9e a1       	ldd	r25, Y+38	; 0x26
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <main+0x3c2>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	9a a3       	std	Y+34, r25	; 0x22
    2e5e:	89 a3       	std	Y+33, r24	; 0x21
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <main+0x440>
	else if (__tmp > 65535)
    2e62:	6b a1       	ldd	r22, Y+35	; 0x23
    2e64:	7c a1       	ldd	r23, Y+36	; 0x24
    2e66:	8d a1       	ldd	r24, Y+37	; 0x25
    2e68:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <main+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	9a a3       	std	Y+34, r25	; 0x22
    2ea0:	89 a3       	std	Y+33, r24	; 0x21
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <main+0x422>
    2ea4:	88 ec       	ldi	r24, 0xC8	; 200
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	98 a3       	std	Y+32, r25	; 0x20
    2eaa:	8f 8f       	std	Y+31, r24	; 0x1f
    2eac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eae:	98 a1       	ldd	r25, Y+32	; 0x20
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <main+0x410>
    2eb4:	98 a3       	std	Y+32, r25	; 0x20
    2eb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eba:	9a a1       	ldd	r25, Y+34	; 0x22
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	9a a3       	std	Y+34, r25	; 0x22
    2ec0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <main+0x404>
    2eca:	e0 c0       	rjmp	.+448    	; 0x308c <main+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ece:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9a a3       	std	Y+34, r25	; 0x22
    2ede:	89 a3       	std	Y+33, r24	; 0x21
    2ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ee6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <main+0x44c>
    2ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ef2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ef4:	cb c0       	rjmp	.+406    	; 0x308c <main+0x5ec>
						}
						_delay_ms(500);
					}
					else if( App_u8Key == '#' )
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e3 5b       	subi	r30, 0xB3	; 179
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	83 32       	cpi	r24, 0x23	; 35
    2f00:	09 f0       	breq	.+2      	; 0x2f04 <main+0x464>
    2f02:	c4 c0       	rjmp	.+392    	; 0x308c <main+0x5ec>
					{

						/* Check Error Flag  And Minimum 4_digit Password */
						if( (App_ErrorData == 1) || (App_u8EepromLocation < 4 ) )
    2f04:	fe 01       	movw	r30, r28
    2f06:	e6 5b       	subi	r30, 0xB6	; 182
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	39 f0       	breq	.+14     	; 0x2f1e <main+0x47e>
    2f10:	fe 01       	movw	r30, r28
    2f12:	e4 5b       	subi	r30, 0xB4	; 180
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	84 30       	cpi	r24, 0x04	; 4
    2f1a:	08 f0       	brcs	.+2      	; 0x2f1e <main+0x47e>
    2f1c:	a3 c0       	rjmp	.+326    	; 0x3064 <main+0x5c4>
						{
							/* Increment Error Password Counter */
							App_u8ErrorPassCounter++;
    2f1e:	de 01       	movw	r26, r28
    2f20:	a7 5b       	subi	r26, 0xB7	; 183
    2f22:	bf 4f       	sbci	r27, 0xFF	; 255
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 5b       	subi	r30, 0xB7	; 183
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	8c 93       	st	X, r24

							/* Check How Many Times User Enter Incorrect Password */
							if(App_u8ErrorPassCounter  == 3)
    2f30:	fe 01       	movw	r30, r28
    2f32:	e7 5b       	subi	r30, 0xB7	; 183
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	83 30       	cpi	r24, 0x03	; 3
    2f3a:	39 f4       	brne	.+14     	; 0x2f4a <main+0x4aa>
							{
								/* Raise Block Status Flag By Writing 1 In EEPROM */
								Eeprom_u8WiteByte( Device_0 , BLOCK_STATUS_LOCATION , 1);
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	6b e0       	ldi	r22, 0x0B	; 11
    2f40:	70 e0       	ldi	r23, 0x00	; 0
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	0e 94 84 09 	call	0x1308	; 0x1308 <Eeprom_u8WiteByte>
    2f48:	3a c1       	rjmp	.+628    	; 0x31be <main+0x71e>
								break;
							}
							else
							{
								/* Clear LCD  */
								Lcd_vidSendCommand(0x01);
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
								Lcd_vidWriteStr("Invalid Password");
    2f50:	89 e8       	ldi	r24, 0x89	; 137
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 ce 11 	call	0x239c	; 0x239c <Lcd_vidWriteStr>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	aa e7       	ldi	r26, 0x7A	; 122
    2f5e:	b4 e4       	ldi	r27, 0x44	; 68
    2f60:	89 8f       	std	Y+25, r24	; 0x19
    2f62:	9a 8f       	std	Y+26, r25	; 0x1a
    2f64:	ab 8f       	std	Y+27, r26	; 0x1b
    2f66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f68:	69 8d       	ldd	r22, Y+25	; 0x19
    2f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	4a ef       	ldi	r20, 0xFA	; 250
    2f76:	54 e4       	ldi	r21, 0x44	; 68
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	8d 8b       	std	Y+21, r24	; 0x15
    2f82:	9e 8b       	std	Y+22, r25	; 0x16
    2f84:	af 8b       	std	Y+23, r26	; 0x17
    2f86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f88:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	5f e3       	ldi	r21, 0x3F	; 63
    2f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f9c:	88 23       	and	r24, r24
    2f9e:	2c f4       	brge	.+10     	; 0x2faa <main+0x50a>
		__ticks = 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9c 8b       	std	Y+20, r25	; 0x14
    2fa6:	8b 8b       	std	Y+19, r24	; 0x13
    2fa8:	3f c0       	rjmp	.+126    	; 0x3028 <main+0x588>
	else if (__tmp > 65535)
    2faa:	6d 89       	ldd	r22, Y+21	; 0x15
    2fac:	7e 89       	ldd	r23, Y+22	; 0x16
    2fae:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	3f ef       	ldi	r19, 0xFF	; 255
    2fb6:	4f e7       	ldi	r20, 0x7F	; 127
    2fb8:	57 e4       	ldi	r21, 0x47	; 71
    2fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fbe:	18 16       	cp	r1, r24
    2fc0:	4c f5       	brge	.+82     	; 0x3014 <main+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9c 8b       	std	Y+20, r25	; 0x14
    2fe8:	8b 8b       	std	Y+19, r24	; 0x13
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <main+0x56a>
    2fec:	88 ec       	ldi	r24, 0xC8	; 200
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9a 8b       	std	Y+18, r25	; 0x12
    2ff2:	89 8b       	std	Y+17, r24	; 0x11
    2ff4:	89 89       	ldd	r24, Y+17	; 0x11
    2ff6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <main+0x558>
    2ffc:	9a 8b       	std	Y+18, r25	; 0x12
    2ffe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	9c 8b       	std	Y+20, r25	; 0x14
    3008:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300a:	8b 89       	ldd	r24, Y+19	; 0x13
    300c:	9c 89       	ldd	r25, Y+20	; 0x14
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	69 f7       	brne	.-38     	; 0x2fec <main+0x54c>
    3012:	14 c0       	rjmp	.+40     	; 0x303c <main+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3014:	6d 89       	ldd	r22, Y+21	; 0x15
    3016:	7e 89       	ldd	r23, Y+22	; 0x16
    3018:	8f 89       	ldd	r24, Y+23	; 0x17
    301a:	98 8d       	ldd	r25, Y+24	; 0x18
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	9c 8b       	std	Y+20, r25	; 0x14
    3026:	8b 8b       	std	Y+19, r24	; 0x13
    3028:	8b 89       	ldd	r24, Y+19	; 0x13
    302a:	9c 89       	ldd	r25, Y+20	; 0x14
    302c:	98 8b       	std	Y+16, r25	; 0x10
    302e:	8f 87       	std	Y+15, r24	; 0x0f
    3030:	8f 85       	ldd	r24, Y+15	; 0x0f
    3032:	98 89       	ldd	r25, Y+16	; 0x10
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <main+0x594>
    3038:	98 8b       	std	Y+16, r25	; 0x10
    303a:	8f 87       	std	Y+15, r24	; 0x0f
								_delay_ms(1000);
								Lcd_vidSendCommand(0x01);
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>

								/* Close Enter Password Mode*/
								App_u8EnterPassFlag = 0;
    3042:	fe 01       	movw	r30, r28
    3044:	e5 5b       	subi	r30, 0xB5	; 181
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	10 82       	st	Z, r1
								App_u8StartSystem   = 0;
    304a:	fe 01       	movw	r30, r28
    304c:	e9 5b       	subi	r30, 0xB9	; 185
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	10 82       	st	Z, r1
								App_ErrorData       = 0;
    3052:	fe 01       	movw	r30, r28
    3054:	e6 5b       	subi	r30, 0xB6	; 182
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	10 82       	st	Z, r1
							}
							App_u8EepromLocation = 0;
    305a:	fe 01       	movw	r30, r28
    305c:	e4 5b       	subi	r30, 0xB4	; 180
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	10 82       	st	Z, r1
    3062:	14 c0       	rjmp	.+40     	; 0x308c <main+0x5ec>
						}
						else   // Correct Password
						{
							/* Clear LCD  */
							Lcd_vidSendCommand(0x01);
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
							Lcd_vidWriteStr("Welcome Home......");
    306a:	8a e9       	ldi	r24, 0x9A	; 154
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 ce 11 	call	0x239c	; 0x239c <Lcd_vidWriteStr>

							App_u8SystemFlag       = 1;
    3072:	fe 01       	movw	r30, r28
    3074:	e8 5b       	subi	r30, 0xB8	; 184
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	80 83       	st	Z, r24
							App_u8EnterPassFlag    = 0;
    307c:	fe 01       	movw	r30, r28
    307e:	e5 5b       	subi	r30, 0xB5	; 181
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	10 82       	st	Z, r1
							App_u8ErrorPassCounter = 0;
    3084:	fe 01       	movw	r30, r28
    3086:	e7 5b       	subi	r30, 0xB7	; 183
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	10 82       	st	Z, r1
						}
					}
				}
			}

			if( App_u8SystemFlag ==1 )
    308c:	fe 01       	movw	r30, r28
    308e:	e8 5b       	subi	r30, 0xB8	; 184
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	80 81       	ld	r24, Z
    3094:	81 30       	cpi	r24, 0x01	; 1
    3096:	09 f0       	breq	.+2      	; 0x309a <main+0x5fa>
    3098:	8b c0       	rjmp	.+278    	; 0x31b0 <main+0x710>
			{
				Servo_vidSetDegree(90);
    309a:	8a e5       	ldi	r24, 0x5A	; 90
    309c:	0e 94 40 13 	call	0x2680	; 0x2680 <Servo_vidSetDegree>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	aa e7       	ldi	r26, 0x7A	; 122
    30a6:	b4 e4       	ldi	r27, 0x44	; 68
    30a8:	8b 87       	std	Y+11, r24	; 0x0b
    30aa:	9c 87       	std	Y+12, r25	; 0x0c
    30ac:	ad 87       	std	Y+13, r26	; 0x0d
    30ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	4a ef       	ldi	r20, 0xFA	; 250
    30be:	54 e4       	ldi	r21, 0x44	; 68
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	8f 83       	std	Y+7, r24	; 0x07
    30ca:	98 87       	std	Y+8, r25	; 0x08
    30cc:	a9 87       	std	Y+9, r26	; 0x09
    30ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30d0:	6f 81       	ldd	r22, Y+7	; 0x07
    30d2:	78 85       	ldd	r23, Y+8	; 0x08
    30d4:	89 85       	ldd	r24, Y+9	; 0x09
    30d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e8       	ldi	r20, 0x80	; 128
    30de:	5f e3       	ldi	r21, 0x3F	; 63
    30e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e4:	88 23       	and	r24, r24
    30e6:	2c f4       	brge	.+10     	; 0x30f2 <main+0x652>
		__ticks = 1;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
    30f0:	3f c0       	rjmp	.+126    	; 0x3170 <main+0x6d0>
	else if (__tmp > 65535)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	4c f5       	brge	.+82     	; 0x315c <main+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310a:	6b 85       	ldd	r22, Y+11	; 0x0b
    310c:	7c 85       	ldd	r23, Y+12	; 0x0c
    310e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3110:	9e 85       	ldd	r25, Y+14	; 0x0e
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9e 83       	std	Y+6, r25	; 0x06
    3130:	8d 83       	std	Y+5, r24	; 0x05
    3132:	0f c0       	rjmp	.+30     	; 0x3152 <main+0x6b2>
    3134:	88 ec       	ldi	r24, 0xC8	; 200
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <main+0x6a0>
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3152:	8d 81       	ldd	r24, Y+5	; 0x05
    3154:	9e 81       	ldd	r25, Y+6	; 0x06
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	69 f7       	brne	.-38     	; 0x3134 <main+0x694>
    315a:	14 c0       	rjmp	.+40     	; 0x3184 <main+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	8d 83       	std	Y+5, r24	; 0x05
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <main+0x6dc>
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				Servo_vidSetDegree(0);
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	0e 94 40 13 	call	0x2680	; 0x2680 <Servo_vidSetDegree>

				/* Clear LCD  */
				Lcd_vidSendCommand(0x01);
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
				/* Clear Flags To Star System Again */
				App_u8SystemFlag       = 0;
    3190:	fe 01       	movw	r30, r28
    3192:	e8 5b       	subi	r30, 0xB8	; 184
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	10 82       	st	Z, r1
				App_u8EnterPassFlag    = 0;
    3198:	fe 01       	movw	r30, r28
    319a:	e5 5b       	subi	r30, 0xB5	; 181
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	10 82       	st	Z, r1
				App_u8StartSystem      = 0;
    31a0:	fe 01       	movw	r30, r28
    31a2:	e9 5b       	subi	r30, 0xB9	; 185
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	10 82       	st	Z, r1
				App_u8EepromLocation   = 0;
    31a8:	fe 01       	movw	r30, r28
    31aa:	e4 5b       	subi	r30, 0xB4	; 180
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	10 82       	st	Z, r1
		Eeprom_u8ReadByte( Device_0 , BLOCK_STATUS_LOCATION , &App_u8BlockStatusFlag);
		_delay_ms(10);


		/* All Time Ask About Block Status Flag And Make It As Condition To Complete System */
		while( App_u8BlockStatusFlag != 1 )
    31b0:	fe 01       	movw	r30, r28
    31b2:	e2 5b       	subi	r30, 0xB2	; 178
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	09 f0       	breq	.+2      	; 0x31be <main+0x71e>
    31bc:	3f cd       	rjmp	.-1410   	; 0x2c3c <main+0x19c>

			}
		}

		/* That mean System Blocked And Block_Status_Flag Raised */
		Lcd_vidSendCommand(0x01);
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <Lcd_vidSendCommand>
		Lcd_vidWriteStr(" System Blocked");
    31c4:	8d ea       	ldi	r24, 0xAD	; 173
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 ce 11 	call	0x239c	; 0x239c <Lcd_vidWriteStr>
		Buzzer_vidTurnOn();
    31cc:	0e 94 07 07 	call	0xe0e	; 0xe0e <Buzzer_vidTurnOn>
		Led_vidTurnOn( LED_1 );
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	0e 94 5f 12 	call	0x24be	; 0x24be <Led_vidTurnOn>

		break;
	}
	return 0;
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
}
    31da:	c1 5b       	subi	r28, 0xB1	; 177
    31dc:	df 4f       	sbci	r29, 0xFF	; 255
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	08 95       	ret

000031f2 <__prologue_saves__>:
    31f2:	2f 92       	push	r2
    31f4:	3f 92       	push	r3
    31f6:	4f 92       	push	r4
    31f8:	5f 92       	push	r5
    31fa:	6f 92       	push	r6
    31fc:	7f 92       	push	r7
    31fe:	8f 92       	push	r8
    3200:	9f 92       	push	r9
    3202:	af 92       	push	r10
    3204:	bf 92       	push	r11
    3206:	cf 92       	push	r12
    3208:	df 92       	push	r13
    320a:	ef 92       	push	r14
    320c:	ff 92       	push	r15
    320e:	0f 93       	push	r16
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	ca 1b       	sub	r28, r26
    321c:	db 0b       	sbc	r29, r27
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	09 94       	ijmp

0000322a <__epilogue_restores__>:
    322a:	2a 88       	ldd	r2, Y+18	; 0x12
    322c:	39 88       	ldd	r3, Y+17	; 0x11
    322e:	48 88       	ldd	r4, Y+16	; 0x10
    3230:	5f 84       	ldd	r5, Y+15	; 0x0f
    3232:	6e 84       	ldd	r6, Y+14	; 0x0e
    3234:	7d 84       	ldd	r7, Y+13	; 0x0d
    3236:	8c 84       	ldd	r8, Y+12	; 0x0c
    3238:	9b 84       	ldd	r9, Y+11	; 0x0b
    323a:	aa 84       	ldd	r10, Y+10	; 0x0a
    323c:	b9 84       	ldd	r11, Y+9	; 0x09
    323e:	c8 84       	ldd	r12, Y+8	; 0x08
    3240:	df 80       	ldd	r13, Y+7	; 0x07
    3242:	ee 80       	ldd	r14, Y+6	; 0x06
    3244:	fd 80       	ldd	r15, Y+5	; 0x05
    3246:	0c 81       	ldd	r16, Y+4	; 0x04
    3248:	1b 81       	ldd	r17, Y+3	; 0x03
    324a:	aa 81       	ldd	r26, Y+2	; 0x02
    324c:	b9 81       	ldd	r27, Y+1	; 0x01
    324e:	ce 0f       	add	r28, r30
    3250:	d1 1d       	adc	r29, r1
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	ed 01       	movw	r28, r26
    325e:	08 95       	ret

00003260 <_exit>:
    3260:	f8 94       	cli

00003262 <__stop_program>:
    3262:	ff cf       	rjmp	.-2      	; 0x3262 <__stop_program>
